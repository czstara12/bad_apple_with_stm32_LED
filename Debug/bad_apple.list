
bad_apple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004d80  08004d80  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d80  08004d80  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ac  20000024  08004dac  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  08004dac  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc00  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002198  00000000  00000000  0002dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  00030c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016792  00000000  00000000  00031950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af9d  00000000  00000000  000480e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080200  00000000  00000000  0005307f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d327f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad0  00000000  00000000  000d32fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000024 	.word	0x20000024
 8000200:	00000000 	.word	0x00000000
 8000204:	08004c6c 	.word	0x08004c6c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000028 	.word	0x20000028
 8000220:	08004c6c 	.word	0x08004c6c

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f923 	bl	8000480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f004 fb00 	bl	8004844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f93b 	bl	80004ea <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f903 	bl	8000496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000c74 	.word	0x20000c74

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000c74 	.word	0x20000c74

080002e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000304:	4013      	ands	r3, r2
 8000306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <__NVIC_GetPriorityGrouping+0x18>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	0a1b      	lsrs	r3, r3, #8
 800033a:	f003 0307 	and.w	r3, r3, #7
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	2b00      	cmp	r3, #0
 800035c:	db0b      	blt.n	8000376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f003 021f 	and.w	r2, r3, #31
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <__NVIC_EnableIRQ+0x34>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	095b      	lsrs	r3, r3, #5
 800036c:	2001      	movs	r0, #1
 800036e:	fa00 f202 	lsl.w	r2, r0, r2
 8000372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	e000e100 	.word	0xe000e100

08000384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	db0a      	blt.n	80003ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	b2da      	uxtb	r2, r3
 800039c:	490c      	ldr	r1, [pc, #48]	; (80003d0 <__NVIC_SetPriority+0x4c>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ac:	e00a      	b.n	80003c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4908      	ldr	r1, [pc, #32]	; (80003d4 <__NVIC_SetPriority+0x50>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	3b04      	subs	r3, #4
 80003bc:	0112      	lsls	r2, r2, #4
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	761a      	strb	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000e100 	.word	0xe000e100
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b089      	sub	sp, #36	; 0x24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	f1c3 0307 	rsb	r3, r3, #7
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	bf28      	it	cs
 80003f6:	2304      	movcs	r3, #4
 80003f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	3304      	adds	r3, #4
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d902      	bls.n	8000408 <NVIC_EncodePriority+0x30>
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	3b03      	subs	r3, #3
 8000406:	e000      	b.n	800040a <NVIC_EncodePriority+0x32>
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	f04f 32ff 	mov.w	r2, #4294967295
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	43da      	mvns	r2, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	401a      	ands	r2, r3
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000420:	f04f 31ff 	mov.w	r1, #4294967295
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	43d9      	mvns	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000430:	4313      	orrs	r3, r2
         );
}
 8000432:	4618      	mov	r0, r3
 8000434:	3724      	adds	r7, #36	; 0x24
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800044c:	d301      	bcc.n	8000452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800044e:	2301      	movs	r3, #1
 8000450:	e00f      	b.n	8000472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <SysTick_Config+0x40>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3b01      	subs	r3, #1
 8000458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800045a:	210f      	movs	r1, #15
 800045c:	f04f 30ff 	mov.w	r0, #4294967295
 8000460:	f7ff ff90 	bl	8000384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <SysTick_Config+0x40>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046a:	4b04      	ldr	r3, [pc, #16]	; (800047c <SysTick_Config+0x40>)
 800046c:	2207      	movs	r2, #7
 800046e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	e000e010 	.word	0xe000e010

08000480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f7ff ff2d 	bl	80002e8 <__NVIC_SetPriorityGrouping>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000496:	b580      	push	{r7, lr}
 8000498:	b086      	sub	sp, #24
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
 80004a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004a8:	f7ff ff42 	bl	8000330 <__NVIC_GetPriorityGrouping>
 80004ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	68b9      	ldr	r1, [r7, #8]
 80004b2:	6978      	ldr	r0, [r7, #20]
 80004b4:	f7ff ff90 	bl	80003d8 <NVIC_EncodePriority>
 80004b8:	4602      	mov	r2, r0
 80004ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004be:	4611      	mov	r1, r2
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff5f 	bl	8000384 <__NVIC_SetPriority>
}
 80004c6:	bf00      	nop
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff35 	bl	800034c <__NVIC_EnableIRQ>
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ffa2 	bl	800043c <SysTick_Config>
 80004f8:	4603      	mov	r3, r0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000504:	b480      	push	{r7}
 8000506:	b08b      	sub	sp, #44	; 0x2c
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800050e:	2300      	movs	r3, #0
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000512:	2300      	movs	r3, #0
 8000514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000516:	e133      	b.n	8000780 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000518:	2201      	movs	r2, #1
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	fa02 f303 	lsl.w	r3, r2, r3
 8000520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	69fa      	ldr	r2, [r7, #28]
 8000528:	4013      	ands	r3, r2
 800052a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800052c:	69ba      	ldr	r2, [r7, #24]
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	429a      	cmp	r2, r3
 8000532:	f040 8122 	bne.w	800077a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	2b12      	cmp	r3, #18
 800053c:	d034      	beq.n	80005a8 <HAL_GPIO_Init+0xa4>
 800053e:	2b12      	cmp	r3, #18
 8000540:	d80d      	bhi.n	800055e <HAL_GPIO_Init+0x5a>
 8000542:	2b02      	cmp	r3, #2
 8000544:	d02b      	beq.n	800059e <HAL_GPIO_Init+0x9a>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d804      	bhi.n	8000554 <HAL_GPIO_Init+0x50>
 800054a:	2b00      	cmp	r3, #0
 800054c:	d031      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
 800054e:	2b01      	cmp	r3, #1
 8000550:	d01c      	beq.n	800058c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000552:	e048      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000554:	2b03      	cmp	r3, #3
 8000556:	d043      	beq.n	80005e0 <HAL_GPIO_Init+0xdc>
 8000558:	2b11      	cmp	r3, #17
 800055a:	d01b      	beq.n	8000594 <HAL_GPIO_Init+0x90>
          break;
 800055c:	e043      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800055e:	4a8f      	ldr	r2, [pc, #572]	; (800079c <HAL_GPIO_Init+0x298>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d026      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
 8000564:	4a8d      	ldr	r2, [pc, #564]	; (800079c <HAL_GPIO_Init+0x298>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d806      	bhi.n	8000578 <HAL_GPIO_Init+0x74>
 800056a:	4a8d      	ldr	r2, [pc, #564]	; (80007a0 <HAL_GPIO_Init+0x29c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d020      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
 8000570:	4a8c      	ldr	r2, [pc, #560]	; (80007a4 <HAL_GPIO_Init+0x2a0>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d01d      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
          break;
 8000576:	e036      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000578:	4a8b      	ldr	r2, [pc, #556]	; (80007a8 <HAL_GPIO_Init+0x2a4>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d019      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
 800057e:	4a8b      	ldr	r2, [pc, #556]	; (80007ac <HAL_GPIO_Init+0x2a8>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d016      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
 8000584:	4a8a      	ldr	r2, [pc, #552]	; (80007b0 <HAL_GPIO_Init+0x2ac>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d013      	beq.n	80005b2 <HAL_GPIO_Init+0xae>
          break;
 800058a:	e02c      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	623b      	str	r3, [r7, #32]
          break;
 8000592:	e028      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	3304      	adds	r3, #4
 800059a:	623b      	str	r3, [r7, #32]
          break;
 800059c:	e023      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	3308      	adds	r3, #8
 80005a4:	623b      	str	r3, [r7, #32]
          break;
 80005a6:	e01e      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	330c      	adds	r3, #12
 80005ae:	623b      	str	r3, [r7, #32]
          break;
 80005b0:	e019      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d102      	bne.n	80005c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005ba:	2304      	movs	r3, #4
 80005bc:	623b      	str	r3, [r7, #32]
          break;
 80005be:	e012      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d105      	bne.n	80005d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005c8:	2308      	movs	r3, #8
 80005ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	611a      	str	r2, [r3, #16]
          break;
 80005d2:	e008      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005d4:	2308      	movs	r3, #8
 80005d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	69fa      	ldr	r2, [r7, #28]
 80005dc:	615a      	str	r2, [r3, #20]
          break;
 80005de:	e002      	b.n	80005e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
          break;
 80005e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	d801      	bhi.n	80005f0 <HAL_GPIO_Init+0xec>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	e001      	b.n	80005f4 <HAL_GPIO_Init+0xf0>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3304      	adds	r3, #4
 80005f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d802      	bhi.n	8000602 <HAL_GPIO_Init+0xfe>
 80005fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	e002      	b.n	8000608 <HAL_GPIO_Init+0x104>
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	3b08      	subs	r3, #8
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	210f      	movs	r1, #15
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43db      	mvns	r3, r3
 8000618:	401a      	ands	r2, r3
 800061a:	6a39      	ldr	r1, [r7, #32]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	431a      	orrs	r2, r3
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80a2 	beq.w	800077a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000636:	4b5f      	ldr	r3, [pc, #380]	; (80007b4 <HAL_GPIO_Init+0x2b0>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a5e      	ldr	r2, [pc, #376]	; (80007b4 <HAL_GPIO_Init+0x2b0>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b5c      	ldr	r3, [pc, #368]	; (80007b4 <HAL_GPIO_Init+0x2b0>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800064e:	4a5a      	ldr	r2, [pc, #360]	; (80007b8 <HAL_GPIO_Init+0x2b4>)
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	3302      	adds	r3, #2
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	220f      	movs	r2, #15
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	4013      	ands	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a51      	ldr	r2, [pc, #324]	; (80007bc <HAL_GPIO_Init+0x2b8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d01f      	beq.n	80006ba <HAL_GPIO_Init+0x1b6>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a50      	ldr	r2, [pc, #320]	; (80007c0 <HAL_GPIO_Init+0x2bc>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d019      	beq.n	80006b6 <HAL_GPIO_Init+0x1b2>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a4f      	ldr	r2, [pc, #316]	; (80007c4 <HAL_GPIO_Init+0x2c0>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d013      	beq.n	80006b2 <HAL_GPIO_Init+0x1ae>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a4e      	ldr	r2, [pc, #312]	; (80007c8 <HAL_GPIO_Init+0x2c4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d00d      	beq.n	80006ae <HAL_GPIO_Init+0x1aa>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a4d      	ldr	r2, [pc, #308]	; (80007cc <HAL_GPIO_Init+0x2c8>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d007      	beq.n	80006aa <HAL_GPIO_Init+0x1a6>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a4c      	ldr	r2, [pc, #304]	; (80007d0 <HAL_GPIO_Init+0x2cc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <HAL_GPIO_Init+0x1a2>
 80006a2:	2305      	movs	r3, #5
 80006a4:	e00a      	b.n	80006bc <HAL_GPIO_Init+0x1b8>
 80006a6:	2306      	movs	r3, #6
 80006a8:	e008      	b.n	80006bc <HAL_GPIO_Init+0x1b8>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e006      	b.n	80006bc <HAL_GPIO_Init+0x1b8>
 80006ae:	2303      	movs	r3, #3
 80006b0:	e004      	b.n	80006bc <HAL_GPIO_Init+0x1b8>
 80006b2:	2302      	movs	r3, #2
 80006b4:	e002      	b.n	80006bc <HAL_GPIO_Init+0x1b8>
 80006b6:	2301      	movs	r3, #1
 80006b8:	e000      	b.n	80006bc <HAL_GPIO_Init+0x1b8>
 80006ba:	2300      	movs	r3, #0
 80006bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006be:	f002 0203 	and.w	r2, r2, #3
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	4093      	lsls	r3, r2
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006cc:	493a      	ldr	r1, [pc, #232]	; (80007b8 <HAL_GPIO_Init+0x2b4>)
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	089b      	lsrs	r3, r3, #2
 80006d2:	3302      	adds	r3, #2
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006e6:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	493a      	ldr	r1, [pc, #232]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	600b      	str	r3, [r1, #0]
 80006f2:	e006      	b.n	8000702 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006f4:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	4935      	ldr	r1, [pc, #212]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 80006fe:	4013      	ands	r3, r2
 8000700:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	4930      	ldr	r1, [pc, #192]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	4313      	orrs	r3, r2
 8000718:	604b      	str	r3, [r1, #4]
 800071a:	e006      	b.n	800072a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	43db      	mvns	r3, r3
 8000724:	492b      	ldr	r1, [pc, #172]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000726:	4013      	ands	r3, r2
 8000728:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000732:	2b00      	cmp	r3, #0
 8000734:	d006      	beq.n	8000744 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000736:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000738:	689a      	ldr	r2, [r3, #8]
 800073a:	4926      	ldr	r1, [pc, #152]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	4313      	orrs	r3, r2
 8000740:	608b      	str	r3, [r1, #8]
 8000742:	e006      	b.n	8000752 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	43db      	mvns	r3, r3
 800074c:	4921      	ldr	r1, [pc, #132]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 800074e:	4013      	ands	r3, r2
 8000750:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d006      	beq.n	800076c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000760:	68da      	ldr	r2, [r3, #12]
 8000762:	491c      	ldr	r1, [pc, #112]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
 800076a:	e006      	b.n	800077a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 800076e:	68da      	ldr	r2, [r3, #12]
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	43db      	mvns	r3, r3
 8000774:	4917      	ldr	r1, [pc, #92]	; (80007d4 <HAL_GPIO_Init+0x2d0>)
 8000776:	4013      	ands	r3, r2
 8000778:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	3301      	adds	r3, #1
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000786:	fa22 f303 	lsr.w	r3, r2, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	f47f aec4 	bne.w	8000518 <HAL_GPIO_Init+0x14>
  }
}
 8000790:	bf00      	nop
 8000792:	372c      	adds	r7, #44	; 0x2c
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	10210000 	.word	0x10210000
 80007a0:	10110000 	.word	0x10110000
 80007a4:	10120000 	.word	0x10120000
 80007a8:	10310000 	.word	0x10310000
 80007ac:	10320000 	.word	0x10320000
 80007b0:	10220000 	.word	0x10220000
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010000 	.word	0x40010000
 80007bc:	40010800 	.word	0x40010800
 80007c0:	40010c00 	.word	0x40010c00
 80007c4:	40011000 	.word	0x40011000
 80007c8:	40011400 	.word	0x40011400
 80007cc:	40011800 	.word	0x40011800
 80007d0:	40011c00 	.word	0x40011c00
 80007d4:	40010400 	.word	0x40010400

080007d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	807b      	strh	r3, [r7, #2]
 80007e4:	4613      	mov	r3, r2
 80007e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007e8:	787b      	ldrb	r3, [r7, #1]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ee:	887a      	ldrh	r2, [r7, #2]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80007f4:	e003      	b.n	80007fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	041a      	lsls	r2, r3, #16
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	611a      	str	r2, [r3, #16]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e26c      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 8087 	beq.w	8000936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000828:	4b92      	ldr	r3, [pc, #584]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 030c 	and.w	r3, r3, #12
 8000830:	2b04      	cmp	r3, #4
 8000832:	d00c      	beq.n	800084e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000834:	4b8f      	ldr	r3, [pc, #572]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 030c 	and.w	r3, r3, #12
 800083c:	2b08      	cmp	r3, #8
 800083e:	d112      	bne.n	8000866 <HAL_RCC_OscConfig+0x5e>
 8000840:	4b8c      	ldr	r3, [pc, #560]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800084c:	d10b      	bne.n	8000866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800084e:	4b89      	ldr	r3, [pc, #548]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d06c      	beq.n	8000934 <HAL_RCC_OscConfig+0x12c>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d168      	bne.n	8000934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e246      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800086e:	d106      	bne.n	800087e <HAL_RCC_OscConfig+0x76>
 8000870:	4b80      	ldr	r3, [pc, #512]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a7f      	ldr	r2, [pc, #508]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e02e      	b.n	80008dc <HAL_RCC_OscConfig+0xd4>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10c      	bne.n	80008a0 <HAL_RCC_OscConfig+0x98>
 8000886:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a7a      	ldr	r2, [pc, #488]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 800088c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000890:	6013      	str	r3, [r2, #0]
 8000892:	4b78      	ldr	r3, [pc, #480]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a77      	ldr	r2, [pc, #476]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e01d      	b.n	80008dc <HAL_RCC_OscConfig+0xd4>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008a8:	d10c      	bne.n	80008c4 <HAL_RCC_OscConfig+0xbc>
 80008aa:	4b72      	ldr	r3, [pc, #456]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a71      	ldr	r2, [pc, #452]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	4b6f      	ldr	r3, [pc, #444]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a6e      	ldr	r2, [pc, #440]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c0:	6013      	str	r3, [r2, #0]
 80008c2:	e00b      	b.n	80008dc <HAL_RCC_OscConfig+0xd4>
 80008c4:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a6a      	ldr	r2, [pc, #424]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b68      	ldr	r3, [pc, #416]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a67      	ldr	r2, [pc, #412]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80008d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d013      	beq.n	800090c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008e4:	f7ff fcf6 	bl	80002d4 <HAL_GetTick>
 80008e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	e008      	b.n	80008fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008ec:	f7ff fcf2 	bl	80002d4 <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	2b64      	cmp	r3, #100	; 0x64
 80008f8:	d901      	bls.n	80008fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008fa:	2303      	movs	r3, #3
 80008fc:	e1fa      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f0      	beq.n	80008ec <HAL_RCC_OscConfig+0xe4>
 800090a:	e014      	b.n	8000936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800090c:	f7ff fce2 	bl	80002d4 <HAL_GetTick>
 8000910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000912:	e008      	b.n	8000926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000914:	f7ff fcde 	bl	80002d4 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	2b64      	cmp	r3, #100	; 0x64
 8000920:	d901      	bls.n	8000926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000922:	2303      	movs	r3, #3
 8000924:	e1e6      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000926:	4b53      	ldr	r3, [pc, #332]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092e:	2b00      	cmp	r3, #0
 8000930:	d1f0      	bne.n	8000914 <HAL_RCC_OscConfig+0x10c>
 8000932:	e000      	b.n	8000936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d063      	beq.n	8000a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000942:	4b4c      	ldr	r3, [pc, #304]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 030c 	and.w	r3, r3, #12
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00b      	beq.n	8000966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800094e:	4b49      	ldr	r3, [pc, #292]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 030c 	and.w	r3, r3, #12
 8000956:	2b08      	cmp	r3, #8
 8000958:	d11c      	bne.n	8000994 <HAL_RCC_OscConfig+0x18c>
 800095a:	4b46      	ldr	r3, [pc, #280]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d116      	bne.n	8000994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000966:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <HAL_RCC_OscConfig+0x176>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d001      	beq.n	800097e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e1ba      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097e:	4b3d      	ldr	r3, [pc, #244]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	4939      	ldr	r1, [pc, #228]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 800098e:	4313      	orrs	r3, r2
 8000990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000992:	e03a      	b.n	8000a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d020      	beq.n	80009de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <HAL_RCC_OscConfig+0x270>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a2:	f7ff fc97 	bl	80002d4 <HAL_GetTick>
 80009a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a8:	e008      	b.n	80009bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009aa:	f7ff fc93 	bl	80002d4 <HAL_GetTick>
 80009ae:	4602      	mov	r2, r0
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d901      	bls.n	80009bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009b8:	2303      	movs	r3, #3
 80009ba:	e19b      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f0      	beq.n	80009aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4927      	ldr	r1, [pc, #156]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 80009d8:	4313      	orrs	r3, r2
 80009da:	600b      	str	r3, [r1, #0]
 80009dc:	e015      	b.n	8000a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <HAL_RCC_OscConfig+0x270>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e4:	f7ff fc76 	bl	80002d4 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ea:	e008      	b.n	80009fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ec:	f7ff fc72 	bl	80002d4 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d901      	bls.n	80009fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e17a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f0      	bne.n	80009ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d03a      	beq.n	8000a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d019      	beq.n	8000a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <HAL_RCC_OscConfig+0x274>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a24:	f7ff fc56 	bl	80002d4 <HAL_GetTick>
 8000a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a2a:	e008      	b.n	8000a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fc52 	bl	80002d4 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d901      	bls.n	8000a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e15a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <HAL_RCC_OscConfig+0x26c>)
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f0      	beq.n	8000a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 fab4 	bl	8000fb8 <RCC_Delay>
 8000a50:	e01c      	b.n	8000a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <HAL_RCC_OscConfig+0x274>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a58:	f7ff fc3c 	bl	80002d4 <HAL_GetTick>
 8000a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5e:	e00f      	b.n	8000a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a60:	f7ff fc38 	bl	80002d4 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d908      	bls.n	8000a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e140      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	42420000 	.word	0x42420000
 8000a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a80:	4b9e      	ldr	r3, [pc, #632]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1e9      	bne.n	8000a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 80a6 	beq.w	8000be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a9e:	4b97      	ldr	r3, [pc, #604]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10d      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b94      	ldr	r3, [pc, #592]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	4a93      	ldr	r2, [pc, #588]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	61d3      	str	r3, [r2, #28]
 8000ab6:	4b91      	ldr	r3, [pc, #580]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac6:	4b8e      	ldr	r3, [pc, #568]	; (8000d00 <HAL_RCC_OscConfig+0x4f8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d118      	bne.n	8000b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad2:	4b8b      	ldr	r3, [pc, #556]	; (8000d00 <HAL_RCC_OscConfig+0x4f8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a8a      	ldr	r2, [pc, #552]	; (8000d00 <HAL_RCC_OscConfig+0x4f8>)
 8000ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ade:	f7ff fbf9 	bl	80002d4 <HAL_GetTick>
 8000ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae4:	e008      	b.n	8000af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae6:	f7ff fbf5 	bl	80002d4 <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2b64      	cmp	r3, #100	; 0x64
 8000af2:	d901      	bls.n	8000af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e0fd      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af8:	4b81      	ldr	r3, [pc, #516]	; (8000d00 <HAL_RCC_OscConfig+0x4f8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f0      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d106      	bne.n	8000b1a <HAL_RCC_OscConfig+0x312>
 8000b0c:	4b7b      	ldr	r3, [pc, #492]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b0e:	6a1b      	ldr	r3, [r3, #32]
 8000b10:	4a7a      	ldr	r2, [pc, #488]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6213      	str	r3, [r2, #32]
 8000b18:	e02d      	b.n	8000b76 <HAL_RCC_OscConfig+0x36e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10c      	bne.n	8000b3c <HAL_RCC_OscConfig+0x334>
 8000b22:	4b76      	ldr	r3, [pc, #472]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b24:	6a1b      	ldr	r3, [r3, #32]
 8000b26:	4a75      	ldr	r2, [pc, #468]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	6213      	str	r3, [r2, #32]
 8000b2e:	4b73      	ldr	r3, [pc, #460]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4a72      	ldr	r2, [pc, #456]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	f023 0304 	bic.w	r3, r3, #4
 8000b38:	6213      	str	r3, [r2, #32]
 8000b3a:	e01c      	b.n	8000b76 <HAL_RCC_OscConfig+0x36e>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d10c      	bne.n	8000b5e <HAL_RCC_OscConfig+0x356>
 8000b44:	4b6d      	ldr	r3, [pc, #436]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4a6c      	ldr	r2, [pc, #432]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6213      	str	r3, [r2, #32]
 8000b50:	4b6a      	ldr	r3, [pc, #424]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	4a69      	ldr	r2, [pc, #420]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6213      	str	r3, [r2, #32]
 8000b5c:	e00b      	b.n	8000b76 <HAL_RCC_OscConfig+0x36e>
 8000b5e:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	4a66      	ldr	r2, [pc, #408]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6213      	str	r3, [r2, #32]
 8000b6a:	4b64      	ldr	r3, [pc, #400]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	4a63      	ldr	r2, [pc, #396]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b70:	f023 0304 	bic.w	r3, r3, #4
 8000b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d015      	beq.n	8000baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b7e:	f7ff fba9 	bl	80002d4 <HAL_GetTick>
 8000b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b84:	e00a      	b.n	8000b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b86:	f7ff fba5 	bl	80002d4 <HAL_GetTick>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d901      	bls.n	8000b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e0ab      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b9c:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0ee      	beq.n	8000b86 <HAL_RCC_OscConfig+0x37e>
 8000ba8:	e014      	b.n	8000bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000baa:	f7ff fb93 	bl	80002d4 <HAL_GetTick>
 8000bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb0:	e00a      	b.n	8000bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bb2:	f7ff fb8f 	bl	80002d4 <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e095      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bc8:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1ee      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d105      	bne.n	8000be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a47      	ldr	r2, [pc, #284]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 8081 	beq.w	8000cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d061      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d146      	bne.n	8000c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c04:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <HAL_RCC_OscConfig+0x4fc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fb63 	bl	80002d4 <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c12:	f7ff fb5f 	bl	80002d4 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e067      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c24:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f0      	bne.n	8000c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c38:	d108      	bne.n	8000c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	492d      	ldr	r1, [pc, #180]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a19      	ldr	r1, [r3, #32]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	4927      	ldr	r1, [pc, #156]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000c60:	4313      	orrs	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <HAL_RCC_OscConfig+0x4fc>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fb33 	bl	80002d4 <HAL_GetTick>
 8000c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c70:	e008      	b.n	8000c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c72:	f7ff fb2f 	bl	80002d4 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d901      	bls.n	8000c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c80:	2303      	movs	r3, #3
 8000c82:	e037      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d0f0      	beq.n	8000c72 <HAL_RCC_OscConfig+0x46a>
 8000c90:	e02f      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_RCC_OscConfig+0x4fc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fb1c 	bl	80002d4 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ca0:	f7ff fb18 	bl	80002d4 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e020      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x498>
 8000cbe:	e018      	b.n	8000cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e013      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_RCC_OscConfig+0x4f4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d106      	bne.n	8000cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40007000 	.word	0x40007000
 8000d04:	42420060 	.word	0x42420060

08000d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e0d0      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d1c:	4b6a      	ldr	r3, [pc, #424]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d910      	bls.n	8000d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d2a:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 0207 	bic.w	r2, r3, #7
 8000d32:	4965      	ldr	r1, [pc, #404]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3a:	4b63      	ldr	r3, [pc, #396]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d001      	beq.n	8000d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e0b8      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d020      	beq.n	8000d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d64:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a58      	ldr	r2, [pc, #352]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d7c:	4b53      	ldr	r3, [pc, #332]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	4a52      	ldr	r2, [pc, #328]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d88:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	494d      	ldr	r1, [pc, #308]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d040      	beq.n	8000e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d107      	bne.n	8000dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d115      	bne.n	8000de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e07f      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d107      	bne.n	8000dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc6:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e073      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e06b      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f023 0203 	bic.w	r2, r3, #3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4936      	ldr	r1, [pc, #216]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000df8:	f7ff fa6c 	bl	80002d4 <HAL_GetTick>
 8000dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dfe:	e00a      	b.n	8000e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e00:	f7ff fa68 	bl	80002d4 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e053      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e16:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 020c 	and.w	r2, r3, #12
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d1eb      	bne.n	8000e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d210      	bcs.n	8000e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f023 0207 	bic.w	r2, r3, #7
 8000e3e:	4922      	ldr	r1, [pc, #136]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d001      	beq.n	8000e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e032      	b.n	8000ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d008      	beq.n	8000e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	4916      	ldr	r1, [pc, #88]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000e72:	4313      	orrs	r3, r2
 8000e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d009      	beq.n	8000e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	490e      	ldr	r1, [pc, #56]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e96:	f000 f82d 	bl	8000ef4 <HAL_RCC_GetSysClockFreq>
 8000e9a:	4601      	mov	r1, r0
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_RCC_ClockConfig+0x1c4>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8000ea8:	5cd3      	ldrb	r3, [r2, r3]
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8000eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff f9ca 	bl	8000250 <HAL_InitTick>

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	08004d70 	.word	0x08004d70
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000000 	.word	0x20000000

08000edc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_RCC_EnableCSS+0x14>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	4242004c 	.word	0x4242004c

08000ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ef4:	b490      	push	{r4, r7}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000efc:	1d3c      	adds	r4, r7, #4
 8000efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d002      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x40>
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d003      	beq.n	8000f3a <HAL_RCC_GetSysClockFreq+0x46>
 8000f32:	e02d      	b.n	8000f90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f36:	623b      	str	r3, [r7, #32]
      break;
 8000f38:	e02d      	b.n	8000f96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	0c9b      	lsrs	r3, r3, #18
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f46:	4413      	add	r3, r2
 8000f48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	0c5b      	lsrs	r3, r3, #17
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f66:	4413      	add	r3, r2
 8000f68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f72:	fb02 f203 	mul.w	r2, r2, r3
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7e:	e004      	b.n	8000f8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	623b      	str	r3, [r7, #32]
      break;
 8000f8e:	e002      	b.n	8000f96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f92:	623b      	str	r3, [r7, #32]
      break;
 8000f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f96:	6a3b      	ldr	r3, [r7, #32]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc90      	pop	{r4, r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	08004c84 	.word	0x08004c84
 8000fa8:	08004c94 	.word	0x08004c94
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	007a1200 	.word	0x007a1200
 8000fb4:	003d0900 	.word	0x003d0900

08000fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <RCC_Delay+0x34>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <RCC_Delay+0x38>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0a5b      	lsrs	r3, r3, #9
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000fd4:	bf00      	nop
  }
  while (Delay --);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	60fa      	str	r2, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f9      	bne.n	8000fd4 <RCC_Delay+0x1c>
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	10624dd3 	.word	0x10624dd3

08000ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e053      	b.n	80010ae <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f003 fc41 	bl	80048a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2202      	movs	r2, #2
 800102a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800103c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001062:	431a      	orrs	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	ea42 0103 	orr.w	r1, r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	0c1a      	lsrs	r2, r3, #16
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f002 0204 	and.w	r2, r2, #4
 800108c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	69da      	ldr	r2, [r3, #28]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800109c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b08c      	sub	sp, #48	; 0x30
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_SPI_TransmitReceive+0x26>
 80010d8:	2302      	movs	r3, #2
 80010da:	e18a      	b.n	80013f2 <HAL_SPI_TransmitReceive+0x33c>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80010e4:	f7ff f8f6 	bl	80002d4 <HAL_GetTick>
 80010e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80010fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001102:	2b01      	cmp	r3, #1
 8001104:	d00f      	beq.n	8001126 <HAL_SPI_TransmitReceive+0x70>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800110c:	d107      	bne.n	800111e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <HAL_SPI_TransmitReceive+0x68>
 8001116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800111a:	2b04      	cmp	r3, #4
 800111c:	d003      	beq.n	8001126 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800111e:	2302      	movs	r3, #2
 8001120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001124:	e15b      	b.n	80013de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_SPI_TransmitReceive+0x82>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_SPI_TransmitReceive+0x82>
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800113e:	e14e      	b.n	80013de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b04      	cmp	r3, #4
 800114a:	d003      	beq.n	8001154 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2205      	movs	r2, #5
 8001150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	887a      	ldrh	r2, [r7, #2]
 800116a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001194:	2b40      	cmp	r3, #64	; 0x40
 8001196:	d007      	beq.n	80011a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011b0:	d178      	bne.n	80012a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_SPI_TransmitReceive+0x10a>
 80011ba:	8b7b      	ldrh	r3, [r7, #26]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d166      	bne.n	800128e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d0:	1c9a      	adds	r2, r3, #2
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3b01      	subs	r3, #1
 80011de:	b29a      	uxth	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80011e4:	e053      	b.n	800128e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d11b      	bne.n	800122c <HAL_SPI_TransmitReceive+0x176>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d016      	beq.n	800122c <HAL_SPI_TransmitReceive+0x176>
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	2b01      	cmp	r3, #1
 8001202:	d113      	bne.n	800122c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	881a      	ldrh	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	1c9a      	adds	r2, r3, #2
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800121e:	b29b      	uxth	r3, r3
 8001220:	3b01      	subs	r3, #1
 8001222:	b29a      	uxth	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d119      	bne.n	800126e <HAL_SPI_TransmitReceive+0x1b8>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800123e:	b29b      	uxth	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d014      	beq.n	800126e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	b292      	uxth	r2, r2
 8001250:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001256:	1c9a      	adds	r2, r3, #2
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800126a:	2301      	movs	r3, #1
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800126e:	f7ff f831 	bl	80002d4 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800127a:	429a      	cmp	r2, r3
 800127c:	d807      	bhi.n	800128e <HAL_SPI_TransmitReceive+0x1d8>
 800127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d003      	beq.n	800128e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800128c:	e0a7      	b.n	80013de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1a6      	bne.n	80011e6 <HAL_SPI_TransmitReceive+0x130>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1a1      	bne.n	80011e6 <HAL_SPI_TransmitReceive+0x130>
 80012a2:	e07c      	b.n	800139e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_SPI_TransmitReceive+0x1fc>
 80012ac:	8b7b      	ldrh	r3, [r7, #26]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d16b      	bne.n	800138a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	330c      	adds	r3, #12
 80012bc:	7812      	ldrb	r2, [r2, #0]
 80012be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3b01      	subs	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80012d8:	e057      	b.n	800138a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d11c      	bne.n	8001322 <HAL_SPI_TransmitReceive+0x26c>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d017      	beq.n	8001322 <HAL_SPI_TransmitReceive+0x26c>
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d114      	bne.n	8001322 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	330c      	adds	r3, #12
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001314:	b29b      	uxth	r3, r3
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	d119      	bne.n	8001364 <HAL_SPI_TransmitReceive+0x2ae>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001334:	b29b      	uxth	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d014      	beq.n	8001364 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001356:	b29b      	uxth	r3, r3
 8001358:	3b01      	subs	r3, #1
 800135a:	b29a      	uxth	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001364:	f7fe ffb6 	bl	80002d4 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001370:	429a      	cmp	r2, r3
 8001372:	d803      	bhi.n	800137c <HAL_SPI_TransmitReceive+0x2c6>
 8001374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137a:	d102      	bne.n	8001382 <HAL_SPI_TransmitReceive+0x2cc>
 800137c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001388:	e029      	b.n	80013de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800138e:	b29b      	uxth	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1a2      	bne.n	80012da <HAL_SPI_TransmitReceive+0x224>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001398:	b29b      	uxth	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d19d      	bne.n	80012da <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f893 	bl	80014ce <SPI_EndRxTxTransaction>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80013ba:	e010      	b.n	80013de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	e000      	b.n	80013de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80013dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80013ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800140a:	e04c      	b.n	80014a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001412:	d048      	beq.n	80014a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001414:	f7fe ff5e 	bl	80002d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d902      	bls.n	800142a <SPI_WaitFlagStateUntilTimeout+0x30>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d13d      	bne.n	80014a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001442:	d111      	bne.n	8001468 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800144c:	d004      	beq.n	8001458 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001456:	d107      	bne.n	8001468 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001470:	d10f      	bne.n	8001492 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e00f      	b.n	80014c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4013      	ands	r3, r2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	bf0c      	ite	eq
 80014b6:	2301      	moveq	r3, #1
 80014b8:	2300      	movne	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1a3      	bne.n	800140c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af02      	add	r7, sp, #8
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2200      	movs	r2, #0
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff ff88 	bl	80013fa <SPI_WaitFlagStateUntilTimeout>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f4:	f043 0220 	orr.w	r2, r3, #32
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e000      	b.n	8001502 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e01d      	b.n	8001558 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d106      	bne.n	8001536 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f003 fa03 	bl	800493c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2202      	movs	r2, #2
 800153a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4610      	mov	r0, r2
 800154a:	f000 fa0f 	bl	800196c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b06      	cmp	r3, #6
 8001588:	d007      	beq.n	800159a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0201 	orr.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d122      	bne.n	8001602 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d11b      	bne.n	8001602 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f06f 0202 	mvn.w	r2, #2
 80015d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f9a4 	bl	8001936 <HAL_TIM_IC_CaptureCallback>
 80015ee:	e005      	b.n	80015fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f997 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f9a6 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b04      	cmp	r3, #4
 800160e:	d122      	bne.n	8001656 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b04      	cmp	r3, #4
 800161c:	d11b      	bne.n	8001656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f06f 0204 	mvn.w	r2, #4
 8001626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f97a 	bl	8001936 <HAL_TIM_IC_CaptureCallback>
 8001642:	e005      	b.n	8001650 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f96d 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f97c 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b08      	cmp	r3, #8
 8001662:	d122      	bne.n	80016aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b08      	cmp	r3, #8
 8001670:	d11b      	bne.n	80016aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0208 	mvn.w	r2, #8
 800167a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2204      	movs	r2, #4
 8001680:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f950 	bl	8001936 <HAL_TIM_IC_CaptureCallback>
 8001696:	e005      	b.n	80016a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f943 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f952 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d122      	bne.n	80016fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d11b      	bne.n	80016fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0210 	mvn.w	r2, #16
 80016ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2208      	movs	r2, #8
 80016d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f926 	bl	8001936 <HAL_TIM_IC_CaptureCallback>
 80016ea:	e005      	b.n	80016f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f919 	bl	8001924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f928 	bl	8001948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10e      	bne.n	800172a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f06f 0201 	mvn.w	r2, #1
 8001722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 fe1d 	bl	8004364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001734:	2b80      	cmp	r3, #128	; 0x80
 8001736:	d10e      	bne.n	8001756 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b80      	cmp	r3, #128	; 0x80
 8001744:	d107      	bne.n	8001756 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800174e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fa68 	bl	8001c26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001760:	2b40      	cmp	r3, #64	; 0x40
 8001762:	d10e      	bne.n	8001782 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176e:	2b40      	cmp	r3, #64	; 0x40
 8001770:	d107      	bne.n	8001782 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800177a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f8ec 	bl	800195a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b20      	cmp	r3, #32
 800178e:	d10e      	bne.n	80017ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 0320 	and.w	r3, r3, #32
 800179a:	2b20      	cmp	r3, #32
 800179c:	d107      	bne.n	80017ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f06f 0220 	mvn.w	r2, #32
 80017a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fa33 	bl	8001c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_ConfigClockSource+0x18>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0a6      	b.n	800191c <HAL_TIM_ConfigClockSource+0x166>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80017ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80017f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b40      	cmp	r3, #64	; 0x40
 8001804:	d067      	beq.n	80018d6 <HAL_TIM_ConfigClockSource+0x120>
 8001806:	2b40      	cmp	r3, #64	; 0x40
 8001808:	d80b      	bhi.n	8001822 <HAL_TIM_ConfigClockSource+0x6c>
 800180a:	2b10      	cmp	r3, #16
 800180c:	d073      	beq.n	80018f6 <HAL_TIM_ConfigClockSource+0x140>
 800180e:	2b10      	cmp	r3, #16
 8001810:	d802      	bhi.n	8001818 <HAL_TIM_ConfigClockSource+0x62>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d06f      	beq.n	80018f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001816:	e078      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001818:	2b20      	cmp	r3, #32
 800181a:	d06c      	beq.n	80018f6 <HAL_TIM_ConfigClockSource+0x140>
 800181c:	2b30      	cmp	r3, #48	; 0x30
 800181e:	d06a      	beq.n	80018f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001820:	e073      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001822:	2b70      	cmp	r3, #112	; 0x70
 8001824:	d00d      	beq.n	8001842 <HAL_TIM_ConfigClockSource+0x8c>
 8001826:	2b70      	cmp	r3, #112	; 0x70
 8001828:	d804      	bhi.n	8001834 <HAL_TIM_ConfigClockSource+0x7e>
 800182a:	2b50      	cmp	r3, #80	; 0x50
 800182c:	d033      	beq.n	8001896 <HAL_TIM_ConfigClockSource+0xe0>
 800182e:	2b60      	cmp	r3, #96	; 0x60
 8001830:	d041      	beq.n	80018b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001832:	e06a      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001838:	d066      	beq.n	8001908 <HAL_TIM_ConfigClockSource+0x152>
 800183a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183e:	d017      	beq.n	8001870 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001840:	e063      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6899      	ldr	r1, [r3, #8]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f000 f97c 	bl	8001b4e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001864:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	609a      	str	r2, [r3, #8]
      break;
 800186e:	e04c      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6899      	ldr	r1, [r3, #8]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f000 f965 	bl	8001b4e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001892:	609a      	str	r2, [r3, #8]
      break;
 8001894:	e039      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	461a      	mov	r2, r3
 80018a4:	f000 f8dc 	bl	8001a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2150      	movs	r1, #80	; 0x50
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f933 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 80018b4:	e029      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6859      	ldr	r1, [r3, #4]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f000 f8fa 	bl	8001abc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2160      	movs	r1, #96	; 0x60
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f923 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 80018d4:	e019      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f000 f8bc 	bl	8001a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2140      	movs	r1, #64	; 0x40
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f913 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 80018f4:	e009      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f000 f90a 	bl	8001b1a <TIM_ITRx_SetConfig>
      break;
 8001906:	e000      	b.n	800190a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <TIM_Base_SetConfig+0xe0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <TIM_Base_SetConfig+0x40>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a32      	ldr	r2, [pc, #200]	; (8001a50 <TIM_Base_SetConfig+0xe4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00f      	beq.n	80019ac <TIM_Base_SetConfig+0x40>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001992:	d00b      	beq.n	80019ac <TIM_Base_SetConfig+0x40>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <TIM_Base_SetConfig+0xe8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d007      	beq.n	80019ac <TIM_Base_SetConfig+0x40>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <TIM_Base_SetConfig+0xec>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d003      	beq.n	80019ac <TIM_Base_SetConfig+0x40>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <TIM_Base_SetConfig+0xf0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d108      	bne.n	80019be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <TIM_Base_SetConfig+0xe0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <TIM_Base_SetConfig+0x82>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <TIM_Base_SetConfig+0xe4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00f      	beq.n	80019ee <TIM_Base_SetConfig+0x82>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d4:	d00b      	beq.n	80019ee <TIM_Base_SetConfig+0x82>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <TIM_Base_SetConfig+0xe8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <TIM_Base_SetConfig+0x82>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <TIM_Base_SetConfig+0xec>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d003      	beq.n	80019ee <TIM_Base_SetConfig+0x82>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <TIM_Base_SetConfig+0xf0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d108      	bne.n	8001a00 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <TIM_Base_SetConfig+0xe0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d003      	beq.n	8001a34 <TIM_Base_SetConfig+0xc8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <TIM_Base_SetConfig+0xe4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d103      	bne.n	8001a3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	615a      	str	r2, [r3, #20]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40012c00 	.word	0x40012c00
 8001a50:	40013400 	.word	0x40013400
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40000800 	.word	0x40000800
 8001a5c:	40000c00 	.word	0x40000c00

08001a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	f023 0201 	bic.w	r2, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f023 030a 	bic.w	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	621a      	str	r2, [r3, #32]
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f023 0210 	bic.w	r2, r3, #16
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	031b      	lsls	r3, r3, #12
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001af8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	621a      	str	r2, [r3, #32]
}
 8001b10:	bf00      	nop
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f043 0307 	orr.w	r3, r3, #7
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	021a      	lsls	r2, r3, #8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	609a      	str	r2, [r3, #8]
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e032      	b.n	8001c0a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bdc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <disk_status+0x30>)
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	79fa      	ldrb	r2, [r7, #7]
 8001c50:	4905      	ldr	r1, [pc, #20]	; (8001c68 <disk_status+0x30>)
 8001c52:	440a      	add	r2, r1
 8001c54:	7a12      	ldrb	r2, [r2, #8]
 8001c56:	4610      	mov	r0, r2
 8001c58:	4798      	blx	r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000060 	.word	0x20000060

08001c6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <disk_initialize+0x48>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <disk_initialize+0x48>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <disk_initialize+0x48>)
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	4906      	ldr	r1, [pc, #24]	; (8001cb4 <disk_initialize+0x48>)
 8001c9c:	440a      	add	r2, r1
 8001c9e:	7a12      	ldrb	r2, [r2, #8]
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4798      	blx	r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000060 	.word	0x20000060

08001cb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <disk_read+0x3c>)
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	689c      	ldr	r4, [r3, #8]
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <disk_read+0x3c>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	7a18      	ldrb	r0, [r3, #8]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	47a0      	blx	r4
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	75fb      	strb	r3, [r7, #23]
  return res;
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000060 	.word	0x20000060

08001cf8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <disk_write+0x3c>)
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	68dc      	ldr	r4, [r3, #12]
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <disk_write+0x3c>)
 8001d18:	4413      	add	r3, r2
 8001d1a:	7a18      	ldrb	r0, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	47a0      	blx	r4
 8001d24:	4603      	mov	r3, r0
 8001d26:	75fb      	strb	r3, [r7, #23]
  return res;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000060 	.word	0x20000060

08001d38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	603a      	str	r2, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	460b      	mov	r3, r1
 8001d46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <disk_ioctl+0x38>)
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	4906      	ldr	r1, [pc, #24]	; (8001d70 <disk_ioctl+0x38>)
 8001d58:	440a      	add	r2, r1
 8001d5a:	7a10      	ldrb	r0, [r2, #8]
 8001d5c:	79b9      	ldrb	r1, [r7, #6]
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	4798      	blx	r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
  return res;
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000060 	.word	0x20000060

08001d74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8001d88:	e007      	b.n	8001d9a <mem_cpy+0x26>
		*d++ = *s++;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	1c53      	adds	r3, r2, #1
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1c59      	adds	r1, r3, #1
 8001d94:	6179      	str	r1, [r7, #20]
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	1e5a      	subs	r2, r3, #1
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f2      	bne.n	8001d8a <mem_cpy+0x16>
}
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001dae:	b480      	push	{r7}
 8001db0:	b087      	sub	sp, #28
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8001dbe:	e005      	b.n	8001dcc <mem_set+0x1e>
		*d++ = (BYTE)val;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	617a      	str	r2, [r7, #20]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f4      	bne.n	8001dc0 <mem_set+0x12>
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8001df8:	bf00      	nop
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <mem_cmp+0x40>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	61fa      	str	r2, [r7, #28]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	61ba      	str	r2, [r7, #24]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	1acb      	subs	r3, r1, r3
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ec      	beq.n	8001dfa <mem_cmp+0x1a>
	return r;
 8001e20:	697b      	ldr	r3, [r7, #20]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001e36:	e002      	b.n	8001e3e <chk_chr+0x12>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <chk_chr+0x26>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d1f2      	bne.n	8001e38 <chk_chr+0xc>
	return *str;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e038      	b.n	8001ee6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8001e74:	492f      	ldr	r1, [pc, #188]	; (8001f34 <chk_lock+0xd4>)
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d029      	beq.n	8001edc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8001e88:	492a      	ldr	r1, [pc, #168]	; (8001f34 <chk_lock+0xd4>)
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11e      	bne.n	8001ee0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8001ea2:	4924      	ldr	r1, [pc, #144]	; (8001f34 <chk_lock+0xd4>)
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d110      	bne.n	8001ee0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8001ebe:	491d      	ldr	r1, [pc, #116]	; (8001f34 <chk_lock+0xd4>)
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	881a      	ldrh	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d102      	bne.n	8001ee0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8001eda:	e007      	b.n	8001eec <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d9c3      	bls.n	8001e74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d109      	bne.n	8001f06 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <chk_lock+0x9e>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d101      	bne.n	8001f02 <chk_lock+0xa2>
 8001efe:	2300      	movs	r3, #0
 8001f00:	e013      	b.n	8001f2a <chk_lock+0xca>
 8001f02:	2312      	movs	r3, #18
 8001f04:	e011      	b.n	8001f2a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10b      	bne.n	8001f24 <chk_lock+0xc4>
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <chk_lock+0xd4>)
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	330a      	adds	r3, #10
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f22:	d101      	bne.n	8001f28 <chk_lock+0xc8>
 8001f24:	2310      	movs	r3, #16
 8001f26:	e000      	b.n	8001f2a <chk_lock+0xca>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000048 	.word	0x20000048

08001f38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	e002      	b.n	8001f4a <enq_lock+0x12>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d809      	bhi.n	8001f64 <enq_lock+0x2c>
 8001f50:	490a      	ldr	r1, [pc, #40]	; (8001f7c <enq_lock+0x44>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ef      	bne.n	8001f44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000048 	.word	0x20000048

08001f80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e02b      	b.n	8001fe8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8001f90:	4955      	ldr	r1, [pc, #340]	; (80020e8 <inc_lock+0x168>)
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d11b      	bne.n	8001fe2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8001faa:	494f      	ldr	r1, [pc, #316]	; (80020e8 <inc_lock+0x168>)
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3304      	adds	r3, #4
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d10d      	bne.n	8001fe2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8001fc6:	4948      	ldr	r1, [pc, #288]	; (80020e8 <inc_lock+0x168>)
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3308      	adds	r3, #8
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d006      	beq.n	8001ff0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d9d0      	bls.n	8001f90 <inc_lock+0x10>
 8001fee:	e000      	b.n	8001ff2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8001ff0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d145      	bne.n	8002084 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	e002      	b.n	8002004 <inc_lock+0x84>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d809      	bhi.n	800201e <inc_lock+0x9e>
 800200a:	4937      	ldr	r1, [pc, #220]	; (80020e8 <inc_lock+0x168>)
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ef      	bne.n	8001ffe <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d101      	bne.n	8002028 <inc_lock+0xa8>
 8002024:	2300      	movs	r3, #0
 8002026:	e05a      	b.n	80020de <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800202e:	482e      	ldr	r0, [pc, #184]	; (80020e8 <inc_lock+0x168>)
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4403      	add	r3, r0
 800203c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8002044:	4828      	ldr	r0, [pc, #160]	; (80020e8 <inc_lock+0x168>)
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4403      	add	r3, r0
 8002052:	3304      	adds	r3, #4
 8002054:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800205c:	4922      	ldr	r1, [pc, #136]	; (80020e8 <inc_lock+0x168>)
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3308      	adds	r3, #8
 800206c:	4602      	mov	r2, r0
 800206e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8002070:	491d      	ldr	r1, [pc, #116]	; (80020e8 <inc_lock+0x168>)
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	330a      	adds	r3, #10
 8002080:	2200      	movs	r2, #0
 8002082:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <inc_lock+0x124>
 800208a:	4917      	ldr	r1, [pc, #92]	; (80020e8 <inc_lock+0x168>)
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	330a      	adds	r3, #10
 800209a:	881b      	ldrh	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <inc_lock+0x124>
 80020a0:	2300      	movs	r3, #0
 80020a2:	e01c      	b.n	80020de <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10b      	bne.n	80020c2 <inc_lock+0x142>
 80020aa:	490f      	ldr	r1, [pc, #60]	; (80020e8 <inc_lock+0x168>)
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	330a      	adds	r3, #10
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	b299      	uxth	r1, r3
 80020c0:	e001      	b.n	80020c6 <inc_lock+0x146>
 80020c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c6:	4808      	ldr	r0, [pc, #32]	; (80020e8 <inc_lock+0x168>)
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4403      	add	r3, r0
 80020d4:	330a      	adds	r3, #10
 80020d6:	460a      	mov	r2, r1
 80020d8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3301      	adds	r3, #1
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000048 	.word	0x20000048

080020ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d82e      	bhi.n	800215e <dec_lock+0x72>
		n = Files[i].ctr;
 8002100:	491b      	ldr	r1, [pc, #108]	; (8002170 <dec_lock+0x84>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	330a      	adds	r3, #10
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211a:	d101      	bne.n	8002120 <dec_lock+0x34>
 800211c:	2300      	movs	r3, #0
 800211e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <dec_lock+0x40>
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	3b01      	subs	r3, #1
 800212a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800212c:	4910      	ldr	r1, [pc, #64]	; (8002170 <dec_lock+0x84>)
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	330a      	adds	r3, #10
 800213c:	89fa      	ldrh	r2, [r7, #14]
 800213e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <dec_lock+0x6c>
 8002146:	490a      	ldr	r1, [pc, #40]	; (8002170 <dec_lock+0x84>)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	737b      	strb	r3, [r7, #13]
 800215c:	e001      	b.n	8002162 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800215e:	2302      	movs	r3, #2
 8002160:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002162:	7b7b      	ldrb	r3, [r7, #13]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000048 	.word	0x20000048

08002174 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e016      	b.n	80021b0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002182:	490f      	ldr	r1, [pc, #60]	; (80021c0 <clear_lock+0x4c>)
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d108      	bne.n	80021aa <clear_lock+0x36>
 8002198:	4909      	ldr	r1, [pc, #36]	; (80021c0 <clear_lock+0x4c>)
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3301      	adds	r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d9e5      	bls.n	8002182 <clear_lock+0xe>
	}
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	20000048 	.word	0x20000048

080021c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d038      	beq.n	800224c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80021e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	2301      	movs	r3, #1
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	f7ff fd83 	bl	8001cf8 <disk_write>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <sync_window+0x3a>
			res = FR_DISK_ERR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e026      	b.n	800224c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002216:	429a      	cmp	r2, r3
 8002218:	d218      	bcs.n	800224c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e010      	b.n	8002246 <sync_window+0x82>
					wsect += fs->fsize;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	2301      	movs	r3, #1
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	f7ff fd5c 	bl	8001cf8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	3b01      	subs	r3, #1
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d8eb      	bhi.n	8002224 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d01b      	beq.n	80022a8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffa7 	bl	80021c4 <sync_window>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d113      	bne.n	80022a8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	2301      	movs	r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	f7ff fd14 	bl	8001cb8 <disk_read>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d004      	beq.n	80022a0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff82 	bl	80021c4 <sync_window>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f040 809b 	bne.w	8002402 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	f040 8088 	bne.w	80023e8 <sync_fs+0x136>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80022de:	2b01      	cmp	r3, #1
 80022e0:	f040 8082 	bne.w	80023e8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fd5e 	bl	8001dae <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2255      	movs	r2, #85	; 0x55
 80022f6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	22aa      	movs	r2, #170	; 0xaa
 80022fe:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2252      	movs	r2, #82	; 0x52
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2252      	movs	r2, #82	; 0x52
 800230c:	705a      	strb	r2, [r3, #1]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2261      	movs	r2, #97	; 0x61
 8002312:	709a      	strb	r2, [r3, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2241      	movs	r2, #65	; 0x41
 8002318:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2272      	movs	r2, #114	; 0x72
 800231e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2272      	movs	r2, #114	; 0x72
 8002326:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2261      	movs	r2, #97	; 0x61
 8002336:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800234e:	b29b      	uxth	r3, r3
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b29b      	uxth	r3, r3
 8002354:	b2da      	uxtb	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002362:	0c1b      	lsrs	r3, r3, #16
 8002364:	b2da      	uxtb	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002372:	0e1b      	lsrs	r3, r3, #24
 8002374:	b2da      	uxtb	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002390:	b29b      	uxth	r3, r3
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	b29b      	uxth	r3, r3
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80023b4:	0e1b      	lsrs	r3, r3, #24
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80023da:	2301      	movs	r3, #1
 80023dc:	f7ff fc8c 	bl	8001cf8 <disk_write>
			fs->fsi_flag = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fca0 	bl	8001d38 <disk_ioctl>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	3b02      	subs	r3, #2
 800241a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002422:	3b02      	subs	r3, #2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d301      	bcc.n	800242e <clust2sect+0x22>
 800242a:	2300      	movs	r3, #0
 800242c:	e00a      	b.n	8002444 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002434:	461a      	mov	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	fb03 f202 	mul.w	r2, r3, r2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002442:	4413      	add	r3, r2
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d905      	bls.n	800246a <get_fat+0x1c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d302      	bcc.n	8002470 <get_fat+0x22>
		val = 1;	/* Internal error */
 800246a:	2301      	movs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e0a0      	b.n	80025b2 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
 8002474:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800247c:	2b02      	cmp	r3, #2
 800247e:	d044      	beq.n	800250a <get_fat+0xbc>
 8002480:	2b03      	cmp	r3, #3
 8002482:	d063      	beq.n	800254c <get_fat+0xfe>
 8002484:	2b01      	cmp	r3, #1
 8002486:	f040 808a 	bne.w	800259e <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	0a5b      	lsrs	r3, r3, #9
 80024a2:	4413      	add	r3, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fed5 	bl	8002256 <move_window>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d178      	bne.n	80025a4 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	60fa      	str	r2, [r7, #12]
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	0a5b      	lsrs	r3, r3, #9
 80024cc:	4413      	add	r3, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff fec0 	bl	8002256 <move_window>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d165      	bne.n	80025a8 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <get_fat+0xb2>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	e002      	b.n	8002506 <get_fat+0xb8>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002506:	617b      	str	r3, [r7, #20]
			break;
 8002508:	e053      	b.n	80025b2 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	4413      	add	r3, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff fe9c 	bl	8002256 <move_window>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d143      	bne.n	80025ac <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4413      	add	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	3301      	adds	r3, #1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	b21a      	sxth	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b21b      	sxth	r3, r3
 8002542:	4313      	orrs	r3, r2
 8002544:	b21b      	sxth	r3, r3
 8002546:	b29b      	uxth	r3, r3
 8002548:	617b      	str	r3, [r7, #20]
			break;
 800254a:	e032      	b.n	80025b2 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	09db      	lsrs	r3, r3, #7
 8002556:	4413      	add	r3, r2
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fe7b 	bl	8002256 <move_window>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d124      	bne.n	80025b0 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	3303      	adds	r3, #3
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	061a      	lsls	r2, r3, #24
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	3302      	adds	r3, #2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	4313      	orrs	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	3201      	adds	r2, #1
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	0212      	lsls	r2, r2, #8
 800258e:	4313      	orrs	r3, r2
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800259a:	617b      	str	r3, [r7, #20]
			break;
 800259c:	e009      	b.n	80025b2 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 800259e:	2301      	movs	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e006      	b.n	80025b2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80025a4:	bf00      	nop
 80025a6:	e004      	b.n	80025b2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80025a8:	bf00      	nop
 80025aa:	e002      	b.n	80025b2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80025b0:	bf00      	nop
		}
	}

	return val;
 80025b2:	697b      	ldr	r3, [r7, #20]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d905      	bls.n	80025da <put_fat+0x1e>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <put_fat+0x24>
		res = FR_INT_ERR;
 80025da:	2302      	movs	r3, #2
 80025dc:	77fb      	strb	r3, [r7, #31]
 80025de:	e0f3      	b.n	80027c8 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d074      	beq.n	80026d4 <put_fat+0x118>
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	f000 8099 	beq.w	8002722 <put_fat+0x166>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	f040 80df 	bne.w	80027b4 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4413      	add	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	0a5b      	lsrs	r3, r3, #9
 800260e:	4413      	add	r3, r2
 8002610:	4619      	mov	r1, r3
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff fe1f 	bl	8002256 <move_window>
 8002618:	4603      	mov	r3, r0
 800261a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800261c:	7ffb      	ldrb	r3, [r7, #31]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80cb 	bne.w	80027ba <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	617a      	str	r2, [r7, #20]
 800262a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00d      	beq.n	800265a <put_fat+0x9e>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b25b      	sxtb	r3, r3
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	b25a      	sxtb	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	b25b      	sxtb	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b25b      	sxtb	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	e001      	b.n	800265e <put_fat+0xa2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	0a5b      	lsrs	r3, r3, #9
 8002674:	4413      	add	r3, r2
 8002676:	4619      	mov	r1, r3
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff fdec 	bl	8002256 <move_window>
 800267e:	4603      	mov	r3, r0
 8002680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 809a 	bne.w	80027be <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <put_fat+0xec>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e00e      	b.n	80026c6 <put_fat+0x10a>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	f023 030f 	bic.w	r3, r3, #15
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80026d2:	e079      	b.n	80027c8 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	4413      	add	r3, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff fdb7 	bl	8002256 <move_window>
 80026e8:	4603      	mov	r3, r0
 80026ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80026ec:	7ffb      	ldrb	r3, [r7, #31]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d167      	bne.n	80027c2 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4413      	add	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	b29b      	uxth	r3, r3
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	b29a      	uxth	r2, r3
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	3301      	adds	r3, #1
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8002720:	e052      	b.n	80027c8 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	09db      	lsrs	r3, r3, #7
 800272c:	4413      	add	r3, r2
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fd90 	bl	8002256 <move_window>
 8002736:	4603      	mov	r3, r0
 8002738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d142      	bne.n	80027c6 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	3303      	adds	r3, #3
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	061a      	lsls	r2, r3, #24
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	3302      	adds	r3, #2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	4313      	orrs	r3, r2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	3201      	adds	r2, #1
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	0212      	lsls	r2, r2, #8
 8002768:	4313      	orrs	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4313      	orrs	r3, r2
 8002778:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	b29b      	uxth	r3, r3
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	b29a      	uxth	r2, r3
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	3301      	adds	r3, #1
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0c1a      	lsrs	r2, r3, #16
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	3302      	adds	r3, #2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0e1a      	lsrs	r2, r3, #24
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	3303      	adds	r3, #3
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80027b2:	e009      	b.n	80027c8 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 80027b4:	2302      	movs	r3, #2
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	e006      	b.n	80027c8 <put_fat+0x20c>
			if (res != FR_OK) break;
 80027ba:	bf00      	nop
 80027bc:	e004      	b.n	80027c8 <put_fat+0x20c>
			if (res != FR_OK) break;
 80027be:	bf00      	nop
 80027c0:	e002      	b.n	80027c8 <put_fat+0x20c>
			if (res != FR_OK) break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <put_fat+0x20c>
			if (res != FR_OK) break;
 80027c6:	bf00      	nop
		}
	}

	return res;
 80027c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d905      	bls.n	80027ee <remove_chain+0x1c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d302      	bcc.n	80027f4 <remove_chain+0x22>
		res = FR_INT_ERR;
 80027ee:	2302      	movs	r3, #2
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e043      	b.n	800287c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80027f8:	e036      	b.n	8002868 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fe26 	bl	800244e <get_fat>
 8002802:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d035      	beq.n	8002876 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d102      	bne.n	8002816 <remove_chain+0x44>
 8002810:	2302      	movs	r3, #2
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e032      	b.n	800287c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d102      	bne.n	8002824 <remove_chain+0x52>
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
 8002822:	e02b      	b.n	800287c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8002824:	2200      	movs	r2, #0
 8002826:	6839      	ldr	r1, [r7, #0]
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fec7 	bl	80025bc <put_fat>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d120      	bne.n	800287a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d00f      	beq.n	8002864 <remove_chain+0x92>
				fs->free_clust++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3c2      	bcc.n	80027fa <remove_chain+0x28>
 8002874:	e002      	b.n	800287c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8002876:	bf00      	nop
 8002878:	e000      	b.n	800287c <remove_chain+0xaa>
			if (res != FR_OK) break;
 800287a:	bf00      	nop
		}
	}

	return res;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800289c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <create_chain+0x2a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d31c      	bcc.n	80028ea <create_chain+0x64>
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	e019      	b.n	80028ea <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fdc8 	bl	800244e <get_fat>
 80028be:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d801      	bhi.n	80028ca <create_chain+0x44>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e076      	b.n	80029b8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d101      	bne.n	80028d6 <create_chain+0x50>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	e070      	b.n	80029b8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d201      	bcs.n	80028e6 <create_chain+0x60>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	e068      	b.n	80029b8 <create_chain+0x132>
		scl = clst;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d307      	bcc.n	8002910 <create_chain+0x8a>
			ncl = 2;
 8002900:	2302      	movs	r3, #2
 8002902:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d901      	bls.n	8002910 <create_chain+0x8a>
 800290c:	2300      	movs	r3, #0
 800290e:	e053      	b.n	80029b8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002910:	6979      	ldr	r1, [r7, #20]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fd9b 	bl	800244e <get_fat>
 8002918:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00e      	beq.n	800293e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002926:	d002      	beq.n	800292e <create_chain+0xa8>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <create_chain+0xac>
			return cs;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	e042      	b.n	80029b8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	429a      	cmp	r2, r3
 8002938:	d1d9      	bne.n	80028ee <create_chain+0x68>
 800293a:	2300      	movs	r3, #0
 800293c:	e03c      	b.n	80029b8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800293e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8002940:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fe38 	bl	80025bc <put_fat>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <create_chain+0xe4>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	6839      	ldr	r1, [r7, #0]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fe2b 	bl	80025bc <put_fat>
 8002966:	4603      	mov	r3, r0
 8002968:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d11a      	bne.n	80029a6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d018      	beq.n	80029b6 <create_chain+0x130>
			fs->free_clust--;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80029a4:	e007      	b.n	80029b6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <create_chain+0x12c>
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	e000      	b.n	80029b4 <create_chain+0x12e>
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80029d0:	3304      	adds	r3, #4
 80029d2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	0a5b      	lsrs	r3, r3, #9
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80029de:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80029e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	613a      	str	r2, [r7, #16]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <clmt_clust+0x3c>
 80029f8:	2300      	movs	r3, #0
 80029fa:	e010      	b.n	8002a1e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002a12:	e7e9      	b.n	80029e8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8002a14:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	4413      	add	r3, r2
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002a42:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d007      	beq.n	8002a5a <dir_sdi+0x32>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d301      	bcc.n	8002a5e <dir_sdi+0x36>
		return FR_INT_ERR;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e074      	b.n	8002b48 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10c      	bne.n	8002a7e <dir_sdi+0x56>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d105      	bne.n	8002a7e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a78:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002a7c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d111      	bne.n	8002aa8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a8a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002a8e:	461a      	mov	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d301      	bcc.n	8002a9a <dir_sdi+0x72>
			return FR_INT_ERR;
 8002a96:	2302      	movs	r3, #2
 8002a98:	e056      	b.n	8002b48 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aa0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	e032      	b.n	8002b0e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002aae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8002ab6:	e01e      	b.n	8002af6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fcc4 	bl	800244e <get_fat>
 8002ac6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d101      	bne.n	8002ad4 <dir_sdi+0xac>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e039      	b.n	8002b48 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d907      	bls.n	8002aea <dir_sdi+0xc2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ae0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d301      	bcc.n	8002aee <dir_sdi+0xc6>
				return FR_INT_ERR;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e02c      	b.n	8002b48 <dir_sdi+0x120>
			idx -= ic;
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d2dc      	bcs.n	8002ab8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b04:	6979      	ldr	r1, [r7, #20]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fc80 	bl	800240c <clust2sect>
 8002b0c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <dir_sdi+0xf8>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e013      	b.n	8002b48 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	091a      	lsrs	r2, r3, #4
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	441a      	add	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b34:	461a      	mov	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8002b60:	3301      	adds	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <dir_next+0x26>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <dir_next+0x2a>
		return FR_NO_FILE;
 8002b76:	2304      	movs	r3, #4
 8002b78:	e0dd      	b.n	8002d36 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f040 80c6 	bne.w	8002d12 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ba4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f0c0 80b0 	bcc.w	8002d12 <dir_next+0x1c2>
				return FR_NO_FILE;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e0bf      	b.n	8002d36 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002bc0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 80a2 	bne.w	8002d12 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f7ff fc36 	bl	800244e <get_fat>
 8002be2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d801      	bhi.n	8002bee <dir_next+0x9e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0a3      	b.n	8002d36 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d101      	bne.n	8002bfa <dir_next+0xaa>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e09d      	b.n	8002d36 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d374      	bcc.n	8002cf4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <dir_next+0xc4>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e090      	b.n	8002d36 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8002c20:	4619      	mov	r1, r3
 8002c22:	4610      	mov	r0, r2
 8002c24:	f7ff fe2f 	bl	8002886 <create_chain>
 8002c28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <dir_next+0xe4>
 8002c30:	2307      	movs	r3, #7
 8002c32:	e080      	b.n	8002d36 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <dir_next+0xee>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e07b      	b.n	8002d36 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d101      	bne.n	8002c4a <dir_next+0xfa>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e075      	b.n	8002d36 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fab7 	bl	80021c4 <sync_window>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <dir_next+0x110>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e06a      	b.n	8002d36 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f89e 	bl	8001dae <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8002c7e:	6979      	ldr	r1, [r7, #20]
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7ff fbc3 	bl	800240c <clust2sect>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e01b      	b.n	8002cca <dir_next+0x17a>
						dp->fs->wflag = 1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fa8d 	bl	80021c4 <sync_window>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <dir_next+0x164>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e040      	b.n	8002d36 <dir_next+0x1e6>
						dp->fs->winsect++;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8002cbe:	3201      	adds	r2, #1
 8002cc0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cd0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d3da      	bcc.n	8002c92 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ce2:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	1a8a      	subs	r2, r1, r2
 8002cf0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d02:	6979      	ldr	r1, [r7, #20]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fb81 	bl	800240c <clust2sect>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	015b      	lsls	r3, r3, #5
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd90      	pop	{r4, r7, pc}

08002d3e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fe6c 	bl	8002a28 <dir_sdi>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d131      	bne.n	8002dbe <dir_alloc+0x80>
		n = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7ff fa72 	bl	8002256 <move_window>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d11f      	bne.n	8002dbc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2be5      	cmp	r3, #229	; 0xe5
 8002d86:	d005      	beq.n	8002d94 <dir_alloc+0x56>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	3301      	adds	r3, #1
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d102      	bne.n	8002da8 <dir_alloc+0x6a>
 8002da2:	e00c      	b.n	8002dbe <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8002da8:	2101      	movs	r1, #1
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff fed0 	bl	8002b50 <dir_next>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0d1      	beq.n	8002d5e <dir_alloc+0x20>
 8002dba:	e000      	b.n	8002dbe <dir_alloc+0x80>
			if (res != FR_OK) break;
 8002dbc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d101      	bne.n	8002dc8 <dir_alloc+0x8a>
 8002dc4:	2307      	movs	r3, #7
 8002dc6:	73fb      	strb	r3, [r7, #15]
	return res;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	331b      	adds	r3, #27
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	331a      	adds	r3, #26
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d10f      	bne.n	8002e20 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	3315      	adds	r3, #21
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b21b      	sxth	r3, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

	return cl;
 8002e20:	68fb      	ldr	r3, [r7, #12]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	331a      	adds	r3, #26
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	331b      	adds	r3, #27
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	0c1a      	lsrs	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3314      	adds	r3, #20
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3315      	adds	r3, #21
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8002e80:	2100      	movs	r1, #0
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fdd0 	bl	8002a28 <dir_sdi>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <dir_find+0x1e>
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	e03b      	b.n	8002f0e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7ff f9d6 	bl	8002256 <move_window>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d128      	bne.n	8002f06 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002eba:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <dir_find+0x56>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	e01e      	b.n	8002f0c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	330b      	adds	r3, #11
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <dir_find+0x7a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002ee2:	220b      	movs	r2, #11
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6938      	ldr	r0, [r7, #16]
 8002ee8:	f7fe ff7a 	bl	8001de0 <mem_cmp>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fe2b 	bl	8002b50 <dir_next>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0c8      	beq.n	8002e96 <dir_find+0x1e>
 8002f04:	e002      	b.n	8002f0c <dir_find+0x94>
		if (res != FR_OK) break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <dir_find+0x94>
			break;
 8002f0a:	bf00      	nop

	return res;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8002f1e:	2101      	movs	r1, #1
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff0c 	bl	8002d3e <dir_alloc>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d126      	bne.n	8002f7e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7ff f989 	bl	8002256 <move_window>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d117      	bne.n	8002f7e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f54:	2220      	movs	r2, #32
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe ff28 	bl	8001dae <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f6a:	220b      	movs	r2, #11
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f7fe ff01 	bl	8001d74 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	e002      	b.n	8002fa0 <create_name+0x18>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b2f      	cmp	r3, #47	; 0x2f
 8002fa6:	d0f8      	beq.n	8002f9a <create_name+0x12>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b5c      	cmp	r3, #92	; 0x5c
 8002fae:	d0f4      	beq.n	8002f9a <create_name+0x12>
	sfn = dp->fn;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002fb6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8002fb8:	220b      	movs	r2, #11
 8002fba:	2120      	movs	r1, #32
 8002fbc:	68b8      	ldr	r0, [r7, #8]
 8002fbe:	f7fe fef6 	bl	8001dae <mem_set>
	si = i = b = 0; ni = 8;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	77fb      	strb	r3, [r7, #31]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	2308      	movs	r3, #8
 8002fd0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	617a      	str	r2, [r7, #20]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8002fe0:	7fbb      	ldrb	r3, [r7, #30]
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d953      	bls.n	800308e <create_name+0x106>
 8002fe6:	7fbb      	ldrb	r3, [r7, #30]
 8002fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8002fea:	d050      	beq.n	800308e <create_name+0x106>
 8002fec:	7fbb      	ldrb	r3, [r7, #30]
 8002fee:	2b5c      	cmp	r3, #92	; 0x5c
 8002ff0:	d04d      	beq.n	800308e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8002ff2:	7fbb      	ldrb	r3, [r7, #30]
 8002ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8002ff6:	d003      	beq.n	8003000 <create_name+0x78>
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d30f      	bcc.n	8003020 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b08      	cmp	r3, #8
 8003004:	d102      	bne.n	800300c <create_name+0x84>
 8003006:	7fbb      	ldrb	r3, [r7, #30]
 8003008:	2b2e      	cmp	r3, #46	; 0x2e
 800300a:	d001      	beq.n	8003010 <create_name+0x88>
 800300c:	2306      	movs	r3, #6
 800300e:	e073      	b.n	80030f8 <create_name+0x170>
			i = 8; ni = 11;
 8003010:	2308      	movs	r3, #8
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	230b      	movs	r3, #11
 8003016:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8003018:	7ffb      	ldrb	r3, [r7, #31]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e035      	b.n	800308c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003020:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003024:	2b00      	cmp	r3, #0
 8003026:	da08      	bge.n	800303a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	f043 0303 	orr.w	r3, r3, #3
 800302e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003030:	7fbb      	ldrb	r3, [r7, #30]
 8003032:	3b80      	subs	r3, #128	; 0x80
 8003034:	4a32      	ldr	r2, [pc, #200]	; (8003100 <create_name+0x178>)
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800303a:	7fbb      	ldrb	r3, [r7, #30]
 800303c:	4619      	mov	r1, r3
 800303e:	4831      	ldr	r0, [pc, #196]	; (8003104 <create_name+0x17c>)
 8003040:	f7fe fef4 	bl	8001e2c <chk_chr>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <create_name+0xc6>
				return FR_INVALID_NAME;
 800304a:	2306      	movs	r3, #6
 800304c:	e054      	b.n	80030f8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800304e:	7fbb      	ldrb	r3, [r7, #30]
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d907      	bls.n	8003064 <create_name+0xdc>
 8003054:	7fbb      	ldrb	r3, [r7, #30]
 8003056:	2b5a      	cmp	r3, #90	; 0x5a
 8003058:	d804      	bhi.n	8003064 <create_name+0xdc>
				b |= 2;
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	f043 0302 	orr.w	r3, r3, #2
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e00c      	b.n	800307e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8003064:	7fbb      	ldrb	r3, [r7, #30]
 8003066:	2b60      	cmp	r3, #96	; 0x60
 8003068:	d909      	bls.n	800307e <create_name+0xf6>
 800306a:	7fbb      	ldrb	r3, [r7, #30]
 800306c:	2b7a      	cmp	r3, #122	; 0x7a
 800306e:	d806      	bhi.n	800307e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	7fbb      	ldrb	r3, [r7, #30]
 800307a:	3b20      	subs	r3, #32
 800307c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	613a      	str	r2, [r7, #16]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	4413      	add	r3, r2
 8003088:	7fba      	ldrb	r2, [r7, #30]
 800308a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800308c:	e7a1      	b.n	8002fd2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	441a      	add	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003098:	7fbb      	ldrb	r3, [r7, #30]
 800309a:	2b20      	cmp	r3, #32
 800309c:	d801      	bhi.n	80030a2 <create_name+0x11a>
 800309e:	2304      	movs	r3, #4
 80030a0:	e000      	b.n	80030a4 <create_name+0x11c>
 80030a2:	2300      	movs	r3, #0
 80030a4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <create_name+0x128>
 80030ac:	2306      	movs	r3, #6
 80030ae:	e023      	b.n	80030f8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2be5      	cmp	r3, #229	; 0xe5
 80030b6:	d102      	bne.n	80030be <create_name+0x136>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2205      	movs	r2, #5
 80030bc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d102      	bne.n	80030ca <create_name+0x142>
 80030c4:	7ffb      	ldrb	r3, [r7, #31]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d103      	bne.n	80030dc <create_name+0x154>
 80030d4:	7fbb      	ldrb	r3, [r7, #30]
 80030d6:	f043 0310 	orr.w	r3, r3, #16
 80030da:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80030dc:	7ffb      	ldrb	r3, [r7, #31]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d103      	bne.n	80030ee <create_name+0x166>
 80030e6:	7fbb      	ldrb	r3, [r7, #30]
 80030e8:	f043 0308 	orr.w	r3, r3, #8
 80030ec:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	330b      	adds	r3, #11
 80030f2:	7fba      	ldrb	r2, [r7, #30]
 80030f4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80030f6:	2300      	movs	r3, #0
#endif
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	08004cf0 	.word	0x08004cf0
 8003104:	08004c98 	.word	0x08004c98

08003108 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b2f      	cmp	r3, #47	; 0x2f
 8003118:	d003      	beq.n	8003122 <follow_path+0x1a>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b5c      	cmp	r3, #92	; 0x5c
 8003120:	d102      	bne.n	8003128 <follow_path+0x20>
		path++;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b1f      	cmp	r3, #31
 8003136:	d80a      	bhi.n	800314e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8003138:	2100      	movs	r1, #0
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fc74 	bl	8002a28 <dir_sdi>
 8003140:	4603      	mov	r3, r0
 8003142:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800314c:	e045      	b.n	80031da <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800314e:	463b      	mov	r3, r7
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff ff18 	bl	8002f88 <create_name>
 8003158:	4603      	mov	r3, r0
 800315a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d136      	bne.n	80031d0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fe88 	bl	8002e78 <dir_find>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003172:	7adb      	ldrb	r3, [r3, #11]
 8003174:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d128      	bne.n	80031d4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003182:	7bbb      	ldrb	r3, [r7, #14]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d123      	bne.n	80031d4 <follow_path+0xcc>
 800318c:	2305      	movs	r3, #5
 800318e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8003190:	e020      	b.n	80031d4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11d      	bne.n	80031d8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80031a2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	330b      	adds	r3, #11
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80031b2:	2305      	movs	r3, #5
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e010      	b.n	80031da <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe06 	bl	8002dd2 <ld_clust>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80031ce:	e7be      	b.n	800314e <follow_path+0x46>
			if (res != FR_OK) break;
 80031d0:	bf00      	nop
 80031d2:	e002      	b.n	80031da <follow_path+0xd2>
				break;
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80031d8:	bf00      	nop
		}
	}

	return res;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
 80031f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d031      	beq.n	800325e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e002      	b.n	8003208 <get_ldnumber+0x24>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b20      	cmp	r3, #32
 800320e:	d903      	bls.n	8003218 <get_ldnumber+0x34>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b3a      	cmp	r3, #58	; 0x3a
 8003216:	d1f4      	bne.n	8003202 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b3a      	cmp	r3, #58	; 0x3a
 800321e:	d11c      	bne.n	800325a <get_ldnumber+0x76>
			tp = *path;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3b30      	subs	r3, #48	; 0x30
 8003230:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b09      	cmp	r3, #9
 8003236:	d80e      	bhi.n	8003256 <get_ldnumber+0x72>
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d10a      	bne.n	8003256 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <get_ldnumber+0x72>
					vol = (int)i;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	e002      	b.n	8003260 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800325e:	693b      	ldr	r3, [r7, #16]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
	...

0800326c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe ffe3 	bl	8002256 <move_window>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <check_fs+0x2e>
		return 3;
 8003296:	2303      	movs	r3, #3
 8003298:	e04a      	b.n	8003330 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80032a0:	3301      	adds	r3, #1
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b21b      	sxth	r3, r3
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <check_fs+0xcc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d001      	beq.n	80032be <check_fs+0x52>
		return 2;
 80032ba:	2302      	movs	r3, #2
 80032bc:	e038      	b.n	8003330 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3336      	adds	r3, #54	; 0x36
 80032c2:	3303      	adds	r3, #3
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	061a      	lsls	r2, r3, #24
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3336      	adds	r3, #54	; 0x36
 80032cc:	3302      	adds	r3, #2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	4313      	orrs	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	3236      	adds	r2, #54	; 0x36
 80032d8:	3201      	adds	r2, #1
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	0212      	lsls	r2, r2, #8
 80032de:	4313      	orrs	r3, r2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <check_fs+0xd0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <check_fs+0x8a>
		return 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e01c      	b.n	8003330 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3352      	adds	r3, #82	; 0x52
 80032fa:	3303      	adds	r3, #3
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	061a      	lsls	r2, r3, #24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3352      	adds	r3, #82	; 0x52
 8003304:	3302      	adds	r3, #2
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	4313      	orrs	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	3252      	adds	r2, #82	; 0x52
 8003310:	3201      	adds	r2, #1
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	0212      	lsls	r2, r2, #8
 8003316:	4313      	orrs	r3, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800331e:	4313      	orrs	r3, r2
 8003320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <check_fs+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <check_fs+0xc2>
		return 0;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <check_fs+0xc4>

	return 1;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	ffffaa55 	.word	0xffffaa55
 800333c:	00544146 	.word	0x00544146

08003340 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b096      	sub	sp, #88	; 0x58
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4613      	mov	r3, r2
 800334c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003354:	68b8      	ldr	r0, [r7, #8]
 8003356:	f7ff ff45 	bl	80031e4 <get_ldnumber>
 800335a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335e:	2b00      	cmp	r3, #0
 8003360:	da01      	bge.n	8003366 <find_volume+0x26>
 8003362:	230b      	movs	r3, #11
 8003364:	e2aa      	b.n	80038bc <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003366:	4a9e      	ldr	r2, [pc, #632]	; (80035e0 <find_volume+0x2a0>)
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <find_volume+0x3a>
 8003376:	230c      	movs	r3, #12
 8003378:	e2a0      	b.n	80038bc <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800337e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01b      	beq.n	80033c2 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800338a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fc51 	bl	8001c38 <disk_status>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800339c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10c      	bne.n	80033c2 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <find_volume+0x7e>
 80033ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80033ba:	230a      	movs	r3, #10
 80033bc:	e27e      	b.n	80038bc <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 80033be:	2300      	movs	r3, #0
 80033c0:	e27c      	b.n	80038bc <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80033ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fc46 	bl	8001c6c <disk_initialize>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80033e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80033f2:	2303      	movs	r3, #3
 80033f4:	e262      	b.n	80038bc <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <find_volume+0xcc>
 80033fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8003408:	230a      	movs	r3, #10
 800340a:	e257      	b.n	80038bc <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003410:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003414:	f7ff ff2a 	bl	800326c <check_fs>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800341e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003422:	2b01      	cmp	r3, #1
 8003424:	d155      	bne.n	80034d2 <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003426:	2300      	movs	r3, #0
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
 800342a:	e029      	b.n	8003480 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800342c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003436:	4413      	add	r3, r2
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	3304      	adds	r3, #4
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d012      	beq.n	800346a <find_volume+0x12a>
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	330b      	adds	r3, #11
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	061a      	lsls	r2, r3, #24
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	330a      	adds	r3, #10
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	4313      	orrs	r3, r2
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	3209      	adds	r2, #9
 800345a:	7812      	ldrb	r2, [r2, #0]
 800345c:	0212      	lsls	r2, r2, #8
 800345e:	4313      	orrs	r3, r2
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	3208      	adds	r2, #8
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	431a      	orrs	r2, r3
 8003468:	e000      	b.n	800346c <find_volume+0x12c>
 800346a:	2200      	movs	r2, #0
 800346c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003474:	440b      	add	r3, r1
 8003476:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800347a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347c:	3301      	adds	r3, #1
 800347e:	643b      	str	r3, [r7, #64]	; 0x40
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	2b03      	cmp	r3, #3
 8003484:	d9d2      	bls.n	800342c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003486:	2300      	movs	r3, #0
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800348a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <find_volume+0x156>
 8003490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003492:	3b01      	subs	r3, #1
 8003494:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800349e:	4413      	add	r3, r2
 80034a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80034a4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80034a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <find_volume+0x178>
 80034ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80034ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80034b0:	f7ff fedc 	bl	800326c <check_fs>
 80034b4:	4603      	mov	r3, r0
 80034b6:	e000      	b.n	80034ba <find_volume+0x17a>
 80034b8:	2302      	movs	r3, #2
 80034ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80034be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <find_volume+0x192>
 80034c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c8:	3301      	adds	r3, #1
 80034ca:	643b      	str	r3, [r7, #64]	; 0x40
 80034cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d9e1      	bls.n	8003496 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80034d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d101      	bne.n	80034de <find_volume+0x19e>
 80034da:	2301      	movs	r3, #1
 80034dc:	e1ee      	b.n	80038bc <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80034de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <find_volume+0x1aa>
 80034e6:	230d      	movs	r3, #13
 80034e8:	e1e8      	b.n	80038bc <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	7b1b      	ldrb	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	b21a      	sxth	r2, r3
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	7adb      	ldrb	r3, [r3, #11]
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d001      	beq.n	8003506 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8003502:	230d      	movs	r3, #13
 8003504:	e1da      	b.n	80038bc <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	7ddb      	ldrb	r3, [r3, #23]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	b21a      	sxth	r2, r3
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	7d9b      	ldrb	r3, [r3, #22]
 8003512:	b21b      	sxth	r3, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	b21b      	sxth	r3, r3
 8003518:	b29b      	uxth	r3, r3
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800351c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d112      	bne.n	8003548 <find_volume+0x208>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003528:	061a      	lsls	r2, r3, #24
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	4313      	orrs	r3, r2
 8003534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003536:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800353a:	0212      	lsls	r2, r2, #8
 800353c:	4313      	orrs	r3, r2
 800353e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003540:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003544:	4313      	orrs	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800354c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	7c1a      	ldrb	r2, [r3, #16]
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003560:	2b01      	cmp	r3, #1
 8003562:	d006      	beq.n	8003572 <find_volume+0x232>
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800356a:	2b02      	cmp	r3, #2
 800356c:	d001      	beq.n	8003572 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800356e:	230d      	movs	r3, #13
 8003570:	e1a4      	b.n	80038bc <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8003578:	461a      	mov	r2, r3
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	7b5a      	ldrb	r2, [r3, #13]
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <find_volume+0x26c>
 8003596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003598:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800359c:	461a      	mov	r2, r3
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80035a4:	3b01      	subs	r3, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 80035ac:	230d      	movs	r3, #13
 80035ae:	e185      	b.n	80038bc <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80035b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b2:	7c9b      	ldrb	r3, [r3, #18]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ba:	7c5b      	ldrb	r3, [r3, #17]
 80035bc:	b21b      	sxth	r3, r3
 80035be:	4313      	orrs	r3, r2
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 80035da:	230d      	movs	r3, #13
 80035dc:	e16e      	b.n	80038bc <find_volume+0x57c>
 80035de:	bf00      	nop
 80035e0:	20000040 	.word	0x20000040

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	7d1b      	ldrb	r3, [r3, #20]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	b21a      	sxth	r2, r3
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	7cdb      	ldrb	r3, [r3, #19]
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b21b      	sxth	r3, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80035fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d112      	bne.n	8003626 <find_volume+0x2e6>
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003606:	061a      	lsls	r2, r3, #24
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	4313      	orrs	r3, r2
 8003612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003614:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003618:	0212      	lsls	r2, r2, #8
 800361a:	4313      	orrs	r3, r2
 800361c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800361e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003622:	4313      	orrs	r3, r2
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	7bdb      	ldrb	r3, [r3, #15]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	b21a      	sxth	r2, r3
 800362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003630:	7b9b      	ldrb	r3, [r3, #14]
 8003632:	b21b      	sxth	r3, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	b21b      	sxth	r3, r3
 8003638:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800363a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <find_volume+0x304>
 8003640:	230d      	movs	r3, #13
 8003642:	e13b      	b.n	80038bc <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003648:	4413      	add	r3, r2
 800364a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8003650:	0912      	lsrs	r2, r2, #4
 8003652:	b292      	uxth	r2, r2
 8003654:	4413      	add	r3, r2
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	429a      	cmp	r2, r3
 800365e:	d201      	bcs.n	8003664 <find_volume+0x324>
 8003660:	230d      	movs	r3, #13
 8003662:	e12b      	b.n	80038bc <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003670:	fbb3 f3f2 	udiv	r3, r3, r2
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <find_volume+0x340>
 800367c:	230d      	movs	r3, #13
 800367e:	e11d      	b.n	80038bc <find_volume+0x57c>
	fmt = FS_FAT12;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f640 72f5 	movw	r2, #4085	; 0xff5
 800368c:	4293      	cmp	r3, r2
 800368e:	d902      	bls.n	8003696 <find_volume+0x356>
 8003690:	2302      	movs	r3, #2
 8003692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800369c:	4293      	cmp	r3, r2
 800369e:	d902      	bls.n	80036a6 <find_volume+0x366>
 80036a0:	2303      	movs	r3, #3
 80036a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	1c9a      	adds	r2, r3, #2
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80036b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036b4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80036b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80036ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036bc:	441a      	add	r2, r3
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 80036c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	441a      	add	r2, r3
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 80036d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d121      	bne.n	800371c <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <find_volume+0x3a6>
 80036e2:	230d      	movs	r3, #13
 80036e4:	e0ea      	b.n	80038bc <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80036ec:	061a      	lsls	r2, r3, #24
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	4313      	orrs	r3, r2
 80036f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036fa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80036fe:	0212      	lsls	r2, r2, #8
 8003700:	4313      	orrs	r3, r2
 8003702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003704:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003708:	431a      	orrs	r2, r3
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
 800371a:	e025      	b.n	8003768 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <find_volume+0x3ea>
 8003726:	230d      	movs	r3, #13
 8003728:	e0c8      	b.n	80038bc <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003732:	441a      	add	r2, r3
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800373a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800373e:	2b02      	cmp	r3, #2
 8003740:	d104      	bne.n	800374c <find_volume+0x40c>
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	e00c      	b.n	8003766 <find_volume+0x426>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	085a      	lsrs	r2, r3, #1
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003766:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800376e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003770:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003774:	0a5b      	lsrs	r3, r3, #9
 8003776:	429a      	cmp	r2, r3
 8003778:	d201      	bcs.n	800377e <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800377a:	230d      	movs	r3, #13
 800377c:	e09e      	b.n	80038bc <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800379c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d177      	bne.n	8003894 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	b21a      	sxth	r2, r3
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037b4:	b21b      	sxth	r3, r3
 80037b6:	4313      	orrs	r3, r2
 80037b8:	b21b      	sxth	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d16a      	bne.n	8003894 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	3301      	adds	r3, #1
 80037c2:	4619      	mov	r1, r3
 80037c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037c6:	f7fe fd46 	bl	8002256 <move_window>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d161      	bne.n	8003894 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80037e8:	b21b      	sxth	r3, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b21b      	sxth	r3, r3
 80037ee:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <find_volume+0x584>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d14f      	bne.n	8003894 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	78db      	ldrb	r3, [r3, #3]
 80037f8:	061a      	lsls	r2, r3, #24
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	789b      	ldrb	r3, [r3, #2]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	4313      	orrs	r3, r2
 8003802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003804:	7852      	ldrb	r2, [r2, #1]
 8003806:	0212      	lsls	r2, r2, #8
 8003808:	4313      	orrs	r3, r2
 800380a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	4313      	orrs	r3, r2
 8003810:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <find_volume+0x588>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d13e      	bne.n	8003894 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8003816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003818:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800381c:	061a      	lsls	r2, r3, #24
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	4313      	orrs	r3, r2
 8003828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800382a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800382e:	0212      	lsls	r2, r2, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003834:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8003838:	4313      	orrs	r3, r2
 800383a:	4a24      	ldr	r2, [pc, #144]	; (80038cc <find_volume+0x58c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d129      	bne.n	8003894 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8003846:	061a      	lsls	r2, r3, #24
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	4313      	orrs	r3, r2
 8003852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003854:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8003858:	0212      	lsls	r2, r2, #8
 800385a:	4313      	orrs	r3, r2
 800385c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800385e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8003862:	431a      	orrs	r2, r3
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8003870:	061a      	lsls	r2, r3, #24
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8003878:	041b      	lsls	r3, r3, #16
 800387a:	4313      	orrs	r3, r2
 800387c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8003882:	0212      	lsls	r2, r2, #8
 8003884:	4313      	orrs	r3, r2
 8003886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003888:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800388c:	431a      	orrs	r2, r3
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800389a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <find_volume+0x590>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <find_volume+0x590>)
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <find_volume+0x590>)
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80038b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038b6:	f7fe fc5d 	bl	8002174 <clear_lock>
#endif

	return FR_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3758      	adds	r7, #88	; 0x58
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	ffffaa55 	.word	0xffffaa55
 80038c8:	41615252 	.word	0x41615252
 80038cc:	61417272 	.word	0x61417272
 80038d0:	20000044 	.word	0x20000044

080038d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d022      	beq.n	800392c <validate+0x58>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01d      	beq.n	800392c <validate+0x58>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <validate+0x58>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003904:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800390e:	429a      	cmp	r2, r3
 8003910:	d10c      	bne.n	800392c <validate+0x58>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003918:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe f98b 	bl	8001c38 <disk_status>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800392c:	2309      	movs	r3, #9
 800392e:	e000      	b.n	8003932 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fc46 	bl	80031e4 <get_ldnumber>
 8003958:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	da01      	bge.n	8003964 <f_mount+0x28>
 8003960:	230b      	movs	r3, #11
 8003962:	e02d      	b.n	80039c0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <f_mount+0x8c>)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8003974:	69b8      	ldr	r0, [r7, #24]
 8003976:	f7fe fbfd 	bl	8002174 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	490d      	ldr	r1, [pc, #52]	; (80039c8 <f_mount+0x8c>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <f_mount+0x6a>
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <f_mount+0x6e>
 80039a6:	2300      	movs	r3, #0
 80039a8:	e00a      	b.n	80039c0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80039aa:	f107 0108 	add.w	r1, r7, #8
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	2200      	movs	r2, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fcc3 	bl	8003340 <find_volume>
 80039ba:	4603      	mov	r3, r0
 80039bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000040 	.word	0x20000040

080039cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	6018      	str	r0, [r3, #0]
 80039da:	f107 0308 	add.w	r3, r7, #8
 80039de:	6019      	str	r1, [r3, #0]
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <f_open+0x26>
 80039ee:	2309      	movs	r3, #9
 80039f0:	e1f2      	b.n	8003dd8 <f_open+0x40c>
	fp->fs = 0;			/* Clear file object */
 80039f2:	f107 030c 	add.w	r3, r7, #12
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	1dfa      	adds	r2, r7, #7
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	f002 021f 	and.w	r2, r2, #31
 8003a08:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	f107 0108 	add.w	r1, r7, #8
 8003a18:	f107 0320 	add.w	r3, r7, #32
 8003a1c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fc8d 	bl	8003340 <find_volume>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8003a2c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 81cf 	bne.w	8003dd4 <f_open+0x408>
		INIT_BUF(dj);
 8003a36:	f107 0320 	add.w	r3, r7, #32
 8003a3a:	f107 0214 	add.w	r2, r7, #20
 8003a3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	f107 0320 	add.w	r3, r7, #32
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff fb5a 	bl	8003108 <follow_path>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003a62:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8003a66:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d11a      	bne.n	8003aa4 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 8003a6e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <f_open+0xb2>
				res = FR_INVALID_NAME;
 8003a76:	2306      	movs	r3, #6
 8003a78:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8003a7c:	e012      	b.n	8003aa4 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003a7e:	1dfb      	adds	r3, r7, #7
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	f107 0320 	add.w	r3, r7, #32
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe f9e1 	bl	8001e60 <chk_lock>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	f003 031c 	and.w	r3, r3, #28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80cc 	beq.w	8003c4a <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 8003ab2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01f      	beq.n	8003afa <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8003aba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d10e      	bne.n	8003ae0 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8003ac2:	f7fe fa39 	bl	8001f38 <enq_lock>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <f_open+0x10e>
 8003acc:	f107 0320 	add.w	r3, r7, #32
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fa20 	bl	8002f16 <dir_register>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	e000      	b.n	8003adc <f_open+0x110>
 8003ada:	2312      	movs	r3, #18
 8003adc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003ae0:	1dfb      	adds	r3, r7, #7
 8003ae2:	1dfa      	adds	r2, r7, #7
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	f042 0208 	orr.w	r2, r2, #8
 8003aea:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8003aec:	f107 0320 	add.w	r3, r7, #32
 8003af0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003af4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8003af8:	e014      	b.n	8003b24 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003afa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003afe:	330b      	adds	r3, #11
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	f003 0311 	and.w	r3, r3, #17
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <f_open+0x146>
					res = FR_DENIED;
 8003b0a:	2307      	movs	r3, #7
 8003b0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8003b10:	e008      	b.n	8003b24 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <f_open+0x158>
						res = FR_EXIST;
 8003b1e:	2308      	movs	r3, #8
 8003b20:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8003b24:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 80af 	bne.w	8003c8c <f_open+0x2c0>
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a8 	beq.w	8003c8c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 8003b3c:	f000 fc0a 	bl	8004354 <get_fattime>
 8003b40:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8003b44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b48:	330e      	adds	r3, #14
 8003b4a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b60:	330f      	adds	r3, #15
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003b6a:	0c1a      	lsrs	r2, r3, #16
 8003b6c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b70:	3310      	adds	r3, #16
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003b7a:	0e1a      	lsrs	r2, r3, #24
 8003b7c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b80:	3311      	adds	r3, #17
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8003b86:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b8a:	330b      	adds	r3, #11
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8003b90:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b94:	331c      	adds	r3, #28
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003b9e:	331d      	adds	r3, #29
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003ba8:	331e      	adds	r3, #30
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003bb2:	331f      	adds	r3, #31
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8003bb8:	f107 0320 	add.w	r3, r7, #32
 8003bbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bc0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff f904 	bl	8002dd2 <ld_clust>
 8003bca:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8003bd4:	f7ff f92a 	bl	8002e2c <st_clust>
				dj.fs->wflag = 1;
 8003bd8:	f107 0320 	add.w	r3, r7, #32
 8003bdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8003be6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d04e      	beq.n	8003c8c <f_open+0x2c0>
					dw = dj.fs->winsect;
 8003bee:	f107 0320 	add.w	r3, r7, #32
 8003bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bf6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003bfa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8003bfe:	f107 0320 	add.w	r3, r7, #32
 8003c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c06:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fe fde1 	bl	80027d2 <remove_chain>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8003c16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d136      	bne.n	8003c8c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8003c1e:	f107 0320 	add.w	r3, r7, #32
 8003c22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c26:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8003c30:	f107 0320 	add.w	r3, r7, #32
 8003c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c38:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fb0a 	bl	8002256 <move_window>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8003c48:	e020      	b.n	8003c8c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8003c4a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11c      	bne.n	8003c8c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8003c52:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003c56:	330b      	adds	r3, #11
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <f_open+0x29e>
					res = FR_NO_FILE;
 8003c62:	2304      	movs	r3, #4
 8003c64:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8003c68:	e010      	b.n	8003c8c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <f_open+0x2c0>
 8003c76:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003c7a:	330b      	adds	r3, #11
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <f_open+0x2c0>
						res = FR_DENIED;
 8003c86:	2307      	movs	r3, #7
 8003c88:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8003c8c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d13d      	bne.n	8003d10 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <f_open+0x2e0>
				mode |= FA__WRITTEN;
 8003ca0:	1dfb      	adds	r3, r7, #7
 8003ca2:	1dfa      	adds	r2, r7, #7
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	f042 0220 	orr.w	r2, r2, #32
 8003caa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8003cac:	f107 0320 	add.w	r3, r7, #32
 8003cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cb4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003ccc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f107 0320 	add.w	r3, r7, #32
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe f948 	bl	8001f80 <inc_lock>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f107 030c 	add.w	r3, r7, #12
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8003cfc:	f107 030c 	add.w	r3, r7, #12
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <f_open+0x344>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8003d10:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15d      	bne.n	8003dd4 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	1dfa      	adds	r2, r7, #7
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8003d32:	f107 0320 	add.w	r3, r7, #32
 8003d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d3a:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff f847 	bl	8002dd2 <ld_clust>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8003d50:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003d54:	331f      	adds	r3, #31
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	061a      	lsls	r2, r3, #24
 8003d5a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8003d5e:	331e      	adds	r3, #30
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003d6a:	321d      	adds	r2, #29
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	0212      	lsls	r2, r2, #8
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8003d76:	321c      	adds	r2, #28
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8003d92:	f107 030c 	add.w	r3, r7, #12
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8003daa:	f107 0320 	add.w	r3, r7, #32
 8003dae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dc6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8003dca:	f107 030c 	add.w	r3, r7, #12
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8003dd4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b08c      	sub	sp, #48	; 0x30
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff fd6a 	bl	80038d4 <validate>
 8003e00:	4603      	mov	r3, r0
 8003e02:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003e04:	7ffb      	ldrb	r3, [r7, #31]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <f_read+0x2c>
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	e150      	b.n	80040b0 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8003e1e:	e147      	b.n	80040b0 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8003e2e:	2307      	movs	r3, #7
 8003e30:	e13e      	b.n	80040b0 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	f240 812d 	bls.w	80040a6 <f_read+0x2c4>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8003e50:	e129      	b.n	80040a6 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 80f2 	bne.w	8004046 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003e68:	0a5b      	lsrs	r3, r3, #9
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e72:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d139      	bne.n	8003ef8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e96:	e018      	b.n	8003eca <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7fe fd88 	bl	80029c0 <clmt_clust>
 8003eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003eb2:	e00a      	b.n	8003eca <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7fe fac3 	bl	800244e <get_fat>
 8003ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8003eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d805      	bhi.n	8003edc <f_read+0xfa>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e0e9      	b.n	80040b0 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d105      	bne.n	8003ef0 <f_read+0x10e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0df      	b.n	80040b0 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003f04:	4619      	mov	r1, r3
 8003f06:	4610      	mov	r0, r2
 8003f08:	f7fe fa80 	bl	800240c <clust2sect>
 8003f0c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <f_read+0x13e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0c7      	b.n	80040b0 <f_read+0x2ce>
			sect += csect;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4413      	add	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0a5b      	lsrs	r3, r3, #9
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d046      	beq.n	8003fc2 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8003f34:	7dfa      	ldrb	r2, [r7, #23]
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	4413      	add	r3, r2
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003f40:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d908      	bls.n	8003f5a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f4e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003f52:	461a      	mov	r2, r3
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f60:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	6a39      	ldr	r1, [r7, #32]
 8003f6a:	f7fd fea5 	bl	8001cb8 <disk_read>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e097      	b.n	80040b0 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <f_read+0x1d8>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90d      	bls.n	8003fba <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	025b      	lsls	r3, r3, #9
 8003faa:	6a3a      	ldr	r2, [r7, #32]
 8003fac:	4413      	add	r3, r2
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd fedd 	bl	8001d74 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	025b      	lsls	r3, r3, #9
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8003fc0:	e05b      	b.n	800407a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d037      	beq.n	800403e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01d      	beq.n	8004018 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fe2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f7fd fe82 	bl	8001cf8 <disk_write>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004002:	2301      	movs	r3, #1
 8004004:	e054      	b.n	80040b0 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800400c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004010:	b2da      	uxtb	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800401e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004022:	68f9      	ldr	r1, [r7, #12]
 8004024:	2301      	movs	r3, #1
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	f7fd fe46 	bl	8001cb8 <disk_read>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800403a:	2301      	movs	r3, #1
 800403c:	e038      	b.n	80040b0 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800404c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004050:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8004056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d901      	bls.n	8004062 <f_read+0x280>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004072:	4619      	mov	r1, r3
 8004074:	6a38      	ldr	r0, [r7, #32]
 8004076:	f7fd fe7d 	bl	8001d74 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	4413      	add	r3, r2
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	441a      	add	r2, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f47f aed2 	bne.w	8003e52 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3730      	adds	r7, #48	; 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fc07 	bl	80038d4 <validate>
 80040c6:	4603      	mov	r3, r0
 80040c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 80a8 	bne.w	8004222 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a0 	beq.w	8004222 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040f6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8004102:	2301      	movs	r3, #1
 8004104:	f7fd fdf8 	bl	8001cf8 <disk_write>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800410e:	2301      	movs	r3, #1
 8004110:	e088      	b.n	8004224 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8004118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411c:	b2da      	uxtb	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7fe f88f 	bl	8002256 <move_window>
 8004138:	4603      	mov	r3, r0
 800413a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d16f      	bne.n	8004222 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004148:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	330b      	adds	r3, #11
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	330b      	adds	r3, #11
 8004154:	f042 0220 	orr.w	r2, r2, #32
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	331c      	adds	r3, #28
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004170:	b29b      	uxth	r3, r3
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	b29a      	uxth	r2, r3
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	331d      	adds	r3, #29
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004184:	0c1a      	lsrs	r2, r3, #16
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	331e      	adds	r3, #30
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004194:	0e1a      	lsrs	r2, r3, #24
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	331f      	adds	r3, #31
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80041a4:	4619      	mov	r1, r3
 80041a6:	6938      	ldr	r0, [r7, #16]
 80041a8:	f7fe fe40 	bl	8002e2c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80041ac:	f000 f8d2 	bl	8004354 <get_fattime>
 80041b0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	3316      	adds	r3, #22
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3317      	adds	r3, #23
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	0c1a      	lsrs	r2, r3, #16
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	3318      	adds	r3, #24
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	0e1a      	lsrs	r2, r3, #24
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	3319      	adds	r3, #25
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	3312      	adds	r3, #18
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	3313      	adds	r3, #19
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80041fa:	f023 0320 	bic.w	r3, r3, #32
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe f84a 	bl	80022b2 <sync_fs>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8004222:	7dfb      	ldrb	r3, [r7, #23]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff3f 	bl	80040b8 <f_sync>
 800423a:	4603      	mov	r3, r0
 800423c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fb45 	bl	80038d4 <validate>
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10e      	bne.n	8004272 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd ff46 	bl	80020ec <dec_lock>
 8004260:	4603      	mov	r3, r0
 8004262:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <FATFS_LinkDriverEx+0x90>)
 8004294:	7a5b      	ldrb	r3, [r3, #9]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	d831      	bhi.n	8004300 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <FATFS_LinkDriverEx+0x90>)
 800429e:	7a5b      	ldrb	r3, [r3, #9]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80042aa:	4b18      	ldr	r3, [pc, #96]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042ac:	7a5b      	ldrb	r3, [r3, #9]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4a16      	ldr	r2, [pc, #88]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042bc:	7a5b      	ldrb	r3, [r3, #9]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042c4:	4413      	add	r3, r2
 80042c6:	79fa      	ldrb	r2, [r7, #7]
 80042c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80042ca:	4b10      	ldr	r3, [pc, #64]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042cc:	7a5b      	ldrb	r3, [r3, #9]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	b2d1      	uxtb	r1, r2
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <FATFS_LinkDriverEx+0x90>)
 80042d6:	7251      	strb	r1, [r2, #9]
 80042d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80042da:	7dbb      	ldrb	r3, [r7, #22]
 80042dc:	3330      	adds	r3, #48	; 0x30
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	3301      	adds	r3, #1
 80042e8:	223a      	movs	r2, #58	; 0x3a
 80042ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3302      	adds	r3, #2
 80042f0:	222f      	movs	r2, #47	; 0x2f
 80042f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3303      	adds	r3, #3
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004300:	7dfb      	ldrb	r3, [r7, #23]
}
 8004302:	4618      	mov	r0, r3
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	20000060 	.word	0x20000060

08004310 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800431a:	2200      	movs	r2, #0
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ffac 	bl	800427c <FATFS_LinkDriverEx>
 8004324:	4603      	mov	r3, r0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004334:	4904      	ldr	r1, [pc, #16]	; (8004348 <MX_FATFS_Init+0x18>)
 8004336:	4805      	ldr	r0, [pc, #20]	; (800434c <MX_FATFS_Init+0x1c>)
 8004338:	f7ff ffea 	bl	8004310 <FATFS_LinkDriver>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <MX_FATFS_Init+0x20>)
 8004342:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004344:	bf00      	nop
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000c78 	.word	0x20000c78
 800434c:	2000000c 	.word	0x2000000c
 8004350:	20000c7c 	.word	0x20000c7c

08004354 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004358:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800435a:	4618      	mov	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
	...

08004364 <HAL_TIM_PeriodElapsedCallback>:
FIL file;
UINT tr=0;
char xc[48][64]={};
int fl=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b0e8      	sub	sp, #416	; 0x1a0
 8004368:	af00      	add	r7, sp, #0
 800436a:	1d3b      	adds	r3, r7, #4
 800436c:	6018      	str	r0, [r3, #0]
	unsigned char buf[8*48];
	fl++;
 800436e:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a39      	ldr	r2, [pc, #228]	; (800445c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004376:	6013      	str	r3, [r2, #0]
	if(fl>300)
 8004378:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004380:	dd0a      	ble.n	8004398 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		f_close(&file);
 8004382:	4837      	ldr	r0, [pc, #220]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004384:	f7ff ff52 	bl	800422c <f_close>
		f_open(&file,"0:/banana.bin",FA_READ);
 8004388:	2201      	movs	r2, #1
 800438a:	4936      	ldr	r1, [pc, #216]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800438c:	4834      	ldr	r0, [pc, #208]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800438e:	f7ff fb1d 	bl	80039cc <f_open>
		fl=0;
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
	}

	f_read(&file, buf, 8*48, &tr);
 8004398:	f107 010c 	add.w	r1, r7, #12
 800439c:	4b32      	ldr	r3, [pc, #200]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800439e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80043a2:	482f      	ldr	r0, [pc, #188]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80043a4:	f7ff fd1d 	bl	8003de2 <f_read>
	for(int a=0;a<48;a++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80043ae:	e04c      	b.n	800444a <HAL_TIM_PeriodElapsedCallback+0xe6>
	{
		for(int b=0;b<8;b++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80043b6:	e03f      	b.n	8004438 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			unsigned char tmp = buf[a*8+b];
 80043b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80043bc:	00da      	lsls	r2, r3, #3
 80043be:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80043c2:	4413      	add	r3, r2
 80043c4:	f107 020c 	add.w	r2, r7, #12
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			char *put = xc[0]+64*a+b*8;
 80043ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80043d2:	019b      	lsls	r3, r3, #6
 80043d4:	461a      	mov	r2, r3
 80043d6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	4a23      	ldr	r2, [pc, #140]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x108>)
 80043e0:	4413      	add	r3, r2
 80043e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
			for(int c=0;c<8;c++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80043ec:	e01b      	b.n	8004426 <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				put[7-c]=!(tmp&1);
 80043ee:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bf0c      	ite	eq
 80043fa:	2301      	moveq	r3, #1
 80043fc:	2300      	movne	r3, #0
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004404:	f1c3 0307 	rsb	r3, r3, #7
 8004408:	4619      	mov	r1, r3
 800440a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800440e:	440b      	add	r3, r1
 8004410:	701a      	strb	r2, [r3, #0]
				tmp = tmp>>1;
 8004412:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			for(int c=0;c<8;c++)
 800441c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004420:	3301      	adds	r3, #1
 8004422:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004426:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800442a:	2b07      	cmp	r3, #7
 800442c:	dddf      	ble.n	80043ee <HAL_TIM_PeriodElapsedCallback+0x8a>
		for(int b=0;b<8;b++)
 800442e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004432:	3301      	adds	r3, #1
 8004434:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004438:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800443c:	2b07      	cmp	r3, #7
 800443e:	ddbb      	ble.n	80043b8 <HAL_TIM_PeriodElapsedCallback+0x54>
	for(int a=0;a<48;a++)
 8004440:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004444:	3301      	adds	r3, #1
 8004446:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800444a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800444e:	2b2f      	cmp	r3, #47	; 0x2f
 8004450:	ddae      	ble.n	80043b0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			}
		}
	}
}
 8004452:	bf00      	nop
 8004454:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000c70 	.word	0x20000c70
 8004460:	2000111c 	.word	0x2000111c
 8004464:	08004cdc 	.word	0x08004cdc
 8004468:	2000006c 	.word	0x2000006c
 800446c:	20000070 	.word	0x20000070

08004470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004476:	f7fb fed5 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800447a:	f000 f89b 	bl	80045b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800447e:	f000 f965 	bl	800474c <MX_GPIO_Init>
  MX_SPI1_Init();
 8004482:	f000 f8df 	bl	8004644 <MX_SPI1_Init>
  MX_TIM3_Init();
 8004486:	f000 f913 	bl	80046b0 <MX_TIM3_Init>
  MX_FATFS_Init();
 800448a:	f7ff ff51 	bl	8004330 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  f_mount(&fatfs, "0:", 1);
 800448e:	2201      	movs	r2, #1
 8004490:	4941      	ldr	r1, [pc, #260]	; (8004598 <main+0x128>)
 8004492:	4842      	ldr	r0, [pc, #264]	; (800459c <main+0x12c>)
 8004494:	f7ff fa52 	bl	800393c <f_mount>
  f_open(&file,"0:/banana.bin",FA_READ);
 8004498:	2201      	movs	r2, #1
 800449a:	4941      	ldr	r1, [pc, #260]	; (80045a0 <main+0x130>)
 800449c:	4841      	ldr	r0, [pc, #260]	; (80045a4 <main+0x134>)
 800449e:	f7ff fa95 	bl	80039cc <f_open>
  HAL_TIM_Base_Start_IT(&htim3);
 80044a2:	4841      	ldr	r0, [pc, #260]	; (80045a8 <main+0x138>)
 80044a4:	f7fd f85c 	bl	8001560 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(char x=0;x<16;x++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	71fb      	strb	r3, [r7, #7]
 80044ac:	e070      	b.n	8004590 <main+0x120>
	  {
		  for(char y=0;y<64;y++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	71bb      	strb	r3, [r7, #6]
 80044b2:	e01a      	b.n	80044ea <main+0x7a>
				  {
					  HAL_GPIO_WritePin(GPIOB, R_Pin, xc[32+x][y]);
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	f103 0220 	add.w	r2, r3, #32
 80044ba:	79bb      	ldrb	r3, [r7, #6]
 80044bc:	493b      	ldr	r1, [pc, #236]	; (80045ac <main+0x13c>)
 80044be:	0192      	lsls	r2, r2, #6
 80044c0:	440a      	add	r2, r1
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	4839      	ldr	r0, [pc, #228]	; (80045b0 <main+0x140>)
 80044cc:	f7fc f984 	bl	80007d8 <HAL_GPIO_WritePin>
					  CLK1;
 80044d0:	2201      	movs	r2, #1
 80044d2:	2120      	movs	r1, #32
 80044d4:	4836      	ldr	r0, [pc, #216]	; (80045b0 <main+0x140>)
 80044d6:	f7fc f97f 	bl	80007d8 <HAL_GPIO_WritePin>
					  CLK0;
 80044da:	2200      	movs	r2, #0
 80044dc:	2120      	movs	r1, #32
 80044de:	4834      	ldr	r0, [pc, #208]	; (80045b0 <main+0x140>)
 80044e0:	f7fc f97a 	bl	80007d8 <HAL_GPIO_WritePin>
		  for(char y=0;y<64;y++)
 80044e4:	79bb      	ldrb	r3, [r7, #6]
 80044e6:	3301      	adds	r3, #1
 80044e8:	71bb      	strb	r3, [r7, #6]
 80044ea:	79bb      	ldrb	r3, [r7, #6]
 80044ec:	2b3f      	cmp	r3, #63	; 0x3f
 80044ee:	d9e1      	bls.n	80044b4 <main+0x44>
				  }
		  for(char y=0;y<64;y++)
 80044f0:	2300      	movs	r3, #0
 80044f2:	717b      	strb	r3, [r7, #5]
 80044f4:	e01a      	b.n	800452c <main+0xbc>
		  		  {
		  			  HAL_GPIO_WritePin(GPIOB, R_Pin, xc[16+x][y]);
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	f103 0210 	add.w	r2, r3, #16
 80044fc:	797b      	ldrb	r3, [r7, #5]
 80044fe:	492b      	ldr	r1, [pc, #172]	; (80045ac <main+0x13c>)
 8004500:	0192      	lsls	r2, r2, #6
 8004502:	440a      	add	r2, r1
 8004504:	4413      	add	r3, r2
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	2140      	movs	r1, #64	; 0x40
 800450c:	4828      	ldr	r0, [pc, #160]	; (80045b0 <main+0x140>)
 800450e:	f7fc f963 	bl	80007d8 <HAL_GPIO_WritePin>
		  			  CLK1;
 8004512:	2201      	movs	r2, #1
 8004514:	2120      	movs	r1, #32
 8004516:	4826      	ldr	r0, [pc, #152]	; (80045b0 <main+0x140>)
 8004518:	f7fc f95e 	bl	80007d8 <HAL_GPIO_WritePin>
		  			  CLK0;
 800451c:	2200      	movs	r2, #0
 800451e:	2120      	movs	r1, #32
 8004520:	4823      	ldr	r0, [pc, #140]	; (80045b0 <main+0x140>)
 8004522:	f7fc f959 	bl	80007d8 <HAL_GPIO_WritePin>
		  for(char y=0;y<64;y++)
 8004526:	797b      	ldrb	r3, [r7, #5]
 8004528:	3301      	adds	r3, #1
 800452a:	717b      	strb	r3, [r7, #5]
 800452c:	797b      	ldrb	r3, [r7, #5]
 800452e:	2b3f      	cmp	r3, #63	; 0x3f
 8004530:	d9e1      	bls.n	80044f6 <main+0x86>
		  		  }
		  for(char y=0;y<64;y++)
 8004532:	2300      	movs	r3, #0
 8004534:	713b      	strb	r3, [r7, #4]
 8004536:	e018      	b.n	800456a <main+0xfa>
		  		  {
		  			  HAL_GPIO_WritePin(GPIOB, R_Pin, xc[x][y]);
 8004538:	79fa      	ldrb	r2, [r7, #7]
 800453a:	793b      	ldrb	r3, [r7, #4]
 800453c:	491b      	ldr	r1, [pc, #108]	; (80045ac <main+0x13c>)
 800453e:	0192      	lsls	r2, r2, #6
 8004540:	440a      	add	r2, r1
 8004542:	4413      	add	r3, r2
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	2140      	movs	r1, #64	; 0x40
 800454a:	4819      	ldr	r0, [pc, #100]	; (80045b0 <main+0x140>)
 800454c:	f7fc f944 	bl	80007d8 <HAL_GPIO_WritePin>
		  			  CLK1;
 8004550:	2201      	movs	r2, #1
 8004552:	2120      	movs	r1, #32
 8004554:	4816      	ldr	r0, [pc, #88]	; (80045b0 <main+0x140>)
 8004556:	f7fc f93f 	bl	80007d8 <HAL_GPIO_WritePin>
		  			  CLK0;
 800455a:	2200      	movs	r2, #0
 800455c:	2120      	movs	r1, #32
 800455e:	4814      	ldr	r0, [pc, #80]	; (80045b0 <main+0x140>)
 8004560:	f7fc f93a 	bl	80007d8 <HAL_GPIO_WritePin>
		  for(char y=0;y<64;y++)
 8004564:	793b      	ldrb	r3, [r7, #4]
 8004566:	3301      	adds	r3, #1
 8004568:	713b      	strb	r3, [r7, #4]
 800456a:	793b      	ldrb	r3, [r7, #4]
 800456c:	2b3f      	cmp	r3, #63	; 0x3f
 800456e:	d9e3      	bls.n	8004538 <main+0xc8>
		  		  }
		  STB1;
 8004570:	2201      	movs	r2, #1
 8004572:	2110      	movs	r1, #16
 8004574:	480e      	ldr	r0, [pc, #56]	; (80045b0 <main+0x140>)
 8004576:	f7fc f92f 	bl	80007d8 <HAL_GPIO_WritePin>
		  STB0;
 800457a:	2200      	movs	r2, #0
 800457c:	2110      	movs	r1, #16
 800457e:	480c      	ldr	r0, [pc, #48]	; (80045b0 <main+0x140>)
 8004580:	f7fc f92a 	bl	80007d8 <HAL_GPIO_WritePin>
		  GPIOB->ODR=x;
 8004584:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <main+0x140>)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	60d3      	str	r3, [r2, #12]
	  for(char x=0;x<16;x++)
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	3301      	adds	r3, #1
 800458e:	71fb      	strb	r3, [r7, #7]
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	d98b      	bls.n	80044ae <main+0x3e>
 8004596:	e787      	b.n	80044a8 <main+0x38>
 8004598:	08004cec 	.word	0x08004cec
 800459c:	200013a0 	.word	0x200013a0
 80045a0:	08004cdc 	.word	0x08004cdc
 80045a4:	2000111c 	.word	0x2000111c
 80045a8:	200010dc 	.word	0x200010dc
 80045ac:	20000070 	.word	0x20000070
 80045b0:	40010c00 	.word	0x40010c00

080045b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b090      	sub	sp, #64	; 0x40
 80045b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ba:	f107 0318 	add.w	r3, r7, #24
 80045be:	2228      	movs	r2, #40	; 0x28
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb4a 	bl	8004c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045c8:	1d3b      	adds	r3, r7, #4
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	609a      	str	r2, [r3, #8]
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045d6:	2301      	movs	r3, #1
 80045d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80045e0:	2300      	movs	r3, #0
 80045e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045e4:	2301      	movs	r3, #1
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045e8:	2302      	movs	r3, #2
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045f8:	f107 0318 	add.w	r3, r7, #24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fc f903 	bl	8000808 <HAL_RCC_OscConfig>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004608:	f000 f916 	bl	8004838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800460c:	230f      	movs	r3, #15
 800460e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004610:	2302      	movs	r3, #2
 8004612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	2102      	movs	r1, #2
 8004626:	4618      	mov	r0, r3
 8004628:	f7fc fb6e 	bl	8000d08 <HAL_RCC_ClockConfig>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004632:	f000 f901 	bl	8004838 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8004636:	f7fc fc51 	bl	8000edc <HAL_RCC_EnableCSS>
}
 800463a:	bf00      	nop
 800463c:	3740      	adds	r7, #64	; 0x40
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004648:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <MX_SPI1_Init+0x64>)
 800464a:	4a18      	ldr	r2, [pc, #96]	; (80046ac <MX_SPI1_Init+0x68>)
 800464c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800464e:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004656:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800465c:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <MX_SPI1_Init+0x64>)
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004664:	2202      	movs	r2, #2
 8004666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <MX_SPI1_Init+0x64>)
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800466e:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004678:	2208      	movs	r2, #8
 800467a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <MX_SPI1_Init+0x64>)
 800467e:	2200      	movs	r2, #0
 8004680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004684:	2200      	movs	r2, #0
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <MX_SPI1_Init+0x64>)
 800468a:	2200      	movs	r2, #0
 800468c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800468e:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004690:	220a      	movs	r2, #10
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004694:	4804      	ldr	r0, [pc, #16]	; (80046a8 <MX_SPI1_Init+0x64>)
 8004696:	f7fc fcad 	bl	8000ff4 <HAL_SPI_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80046a0:	f000 f8ca 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80046a4:	bf00      	nop
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20001348 	.word	0x20001348
 80046ac:	40013000 	.word	0x40013000

080046b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c4:	463b      	mov	r3, r7
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80046cc:	4b1d      	ldr	r3, [pc, #116]	; (8004744 <MX_TIM3_Init+0x94>)
 80046ce:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <MX_TIM3_Init+0x98>)
 80046d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <MX_TIM3_Init+0x94>)
 80046d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <MX_TIM3_Init+0x94>)
 80046dc:	2200      	movs	r2, #0
 80046de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2367;
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <MX_TIM3_Init+0x94>)
 80046e2:	f640 123f 	movw	r2, #2367	; 0x93f
 80046e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e8:	4b16      	ldr	r3, [pc, #88]	; (8004744 <MX_TIM3_Init+0x94>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <MX_TIM3_Init+0x94>)
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046f4:	4813      	ldr	r0, [pc, #76]	; (8004744 <MX_TIM3_Init+0x94>)
 80046f6:	f7fc ff08 	bl	800150a <HAL_TIM_Base_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004700:	f000 f89a 	bl	8004838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4619      	mov	r1, r3
 8004710:	480c      	ldr	r0, [pc, #48]	; (8004744 <MX_TIM3_Init+0x94>)
 8004712:	f7fd f850 	bl	80017b6 <HAL_TIM_ConfigClockSource>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800471c:	f000 f88c 	bl	8004838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004724:	2300      	movs	r3, #0
 8004726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004728:	463b      	mov	r3, r7
 800472a:	4619      	mov	r1, r3
 800472c:	4805      	ldr	r0, [pc, #20]	; (8004744 <MX_TIM3_Init+0x94>)
 800472e:	f7fd fa2d 	bl	8001b8c <HAL_TIMEx_MasterConfigSynchronization>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004738:	f000 f87e 	bl	8004838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800473c:	bf00      	nop
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	200010dc 	.word	0x200010dc
 8004748:	40000400 	.word	0x40000400

0800474c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <MX_GPIO_Init+0xe0>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	4a31      	ldr	r2, [pc, #196]	; (800482c <MX_GPIO_Init+0xe0>)
 8004766:	f043 0310 	orr.w	r3, r3, #16
 800476a:	6193      	str	r3, [r2, #24]
 800476c:	4b2f      	ldr	r3, [pc, #188]	; (800482c <MX_GPIO_Init+0xe0>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <MX_GPIO_Init+0xe0>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	4a2b      	ldr	r2, [pc, #172]	; (800482c <MX_GPIO_Init+0xe0>)
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	6193      	str	r3, [r2, #24]
 8004784:	4b29      	ldr	r3, [pc, #164]	; (800482c <MX_GPIO_Init+0xe0>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <MX_GPIO_Init+0xe0>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4a25      	ldr	r2, [pc, #148]	; (800482c <MX_GPIO_Init+0xe0>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6193      	str	r3, [r2, #24]
 800479c:	4b23      	ldr	r3, [pc, #140]	; (800482c <MX_GPIO_Init+0xe0>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <MX_GPIO_Init+0xe0>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <MX_GPIO_Init+0xe0>)
 80047ae:	f043 0308 	orr.w	r3, r3, #8
 80047b2:	6193      	str	r3, [r2, #24]
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <MX_GPIO_Init+0xe0>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80047c0:	2200      	movs	r2, #0
 80047c2:	2104      	movs	r1, #4
 80047c4:	481a      	ldr	r0, [pc, #104]	; (8004830 <MX_GPIO_Init+0xe4>)
 80047c6:	f7fc f807 	bl	80007d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D_Pin 
 80047ca:	2200      	movs	r2, #0
 80047cc:	21ff      	movs	r1, #255	; 0xff
 80047ce:	4819      	ldr	r0, [pc, #100]	; (8004834 <MX_GPIO_Init+0xe8>)
 80047d0:	f7fc f802 	bl	80007d8 <HAL_GPIO_WritePin>
                          |STB_Pin|CLK_Pin|R_Pin|OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047d4:	2301      	movs	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047dc:	2302      	movs	r3, #2
 80047de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e0:	f107 0310 	add.w	r3, r7, #16
 80047e4:	4619      	mov	r1, r3
 80047e6:	4812      	ldr	r0, [pc, #72]	; (8004830 <MX_GPIO_Init+0xe4>)
 80047e8:	f7fb fe8c 	bl	8000504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047ec:	2304      	movs	r3, #4
 80047ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047f8:	2303      	movs	r3, #3
 80047fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fc:	f107 0310 	add.w	r3, r7, #16
 8004800:	4619      	mov	r1, r3
 8004802:	480b      	ldr	r0, [pc, #44]	; (8004830 <MX_GPIO_Init+0xe4>)
 8004804:	f7fb fe7e 	bl	8000504 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin 
                           STB_Pin CLK_Pin R_Pin OE_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin 
 8004808:	23ff      	movs	r3, #255	; 0xff
 800480a:	613b      	str	r3, [r7, #16]
                          |STB_Pin|CLK_Pin|R_Pin|OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004814:	2303      	movs	r3, #3
 8004816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	4619      	mov	r1, r3
 800481e:	4805      	ldr	r0, [pc, #20]	; (8004834 <MX_GPIO_Init+0xe8>)
 8004820:	f7fb fe70 	bl	8000504 <HAL_GPIO_Init>

}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000
 8004830:	40010800 	.word	0x40010800
 8004834:	40010c00 	.word	0x40010c00

08004838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr

08004844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_MspInit+0x5c>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <HAL_MspInit+0x5c>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6193      	str	r3, [r2, #24]
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_MspInit+0x5c>)
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_MspInit+0x5c>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_MspInit+0x5c>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	61d3      	str	r3, [r2, #28]
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <HAL_MspInit+0x5c>)
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_MspInit+0x60>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_MspInit+0x60>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010000 	.word	0x40010000

080048a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b0:	f107 0310 	add.w	r3, r7, #16
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <HAL_SPI_MspInit+0x88>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d12f      	bne.n	8004928 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <HAL_SPI_MspInit+0x8c>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4a19      	ldr	r2, [pc, #100]	; (8004934 <HAL_SPI_MspInit+0x8c>)
 80048ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048d2:	6193      	str	r3, [r2, #24]
 80048d4:	4b17      	ldr	r3, [pc, #92]	; (8004934 <HAL_SPI_MspInit+0x8c>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_SPI_MspInit+0x8c>)
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	4a13      	ldr	r2, [pc, #76]	; (8004934 <HAL_SPI_MspInit+0x8c>)
 80048e6:	f043 0304 	orr.w	r3, r3, #4
 80048ea:	6193      	str	r3, [r2, #24]
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_SPI_MspInit+0x8c>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80048f8:	23a0      	movs	r3, #160	; 0xa0
 80048fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fc:	2302      	movs	r3, #2
 80048fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004900:	2303      	movs	r3, #3
 8004902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004904:	f107 0310 	add.w	r3, r7, #16
 8004908:	4619      	mov	r1, r3
 800490a:	480b      	ldr	r0, [pc, #44]	; (8004938 <HAL_SPI_MspInit+0x90>)
 800490c:	f7fb fdfa 	bl	8000504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491c:	f107 0310 	add.w	r3, r7, #16
 8004920:	4619      	mov	r1, r3
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <HAL_SPI_MspInit+0x90>)
 8004924:	f7fb fdee 	bl	8000504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004928:	bf00      	nop
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40013000 	.word	0x40013000
 8004934:	40021000 	.word	0x40021000
 8004938:	40010800 	.word	0x40010800

0800493c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0d      	ldr	r2, [pc, #52]	; (8004980 <HAL_TIM_Base_MspInit+0x44>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d113      	bne.n	8004976 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800494e:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_TIM_Base_MspInit+0x48>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4a0c      	ldr	r2, [pc, #48]	; (8004984 <HAL_TIM_Base_MspInit+0x48>)
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	61d3      	str	r3, [r2, #28]
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_TIM_Base_MspInit+0x48>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004966:	2200      	movs	r2, #0
 8004968:	2100      	movs	r1, #0
 800496a:	201d      	movs	r0, #29
 800496c:	f7fb fd93 	bl	8000496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004970:	201d      	movs	r0, #29
 8004972:	f7fb fdac 	bl	80004ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40000400 	.word	0x40000400
 8004984:	40021000 	.word	0x40021000

08004988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004998:	e7fe      	b.n	8004998 <HardFault_Handler+0x4>

0800499a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800499a:	b480      	push	{r7}
 800499c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800499e:	e7fe      	b.n	800499e <MemManage_Handler+0x4>

080049a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049a4:	e7fe      	b.n	80049a4 <BusFault_Handler+0x4>

080049a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049aa:	e7fe      	b.n	80049aa <UsageFault_Handler+0x4>

080049ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049d4:	f7fb fc6c 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}

080049dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049e0:	4802      	ldr	r0, [pc, #8]	; (80049ec <TIM3_IRQHandler+0x10>)
 80049e2:	f7fc fde0 	bl	80015a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200010dc 	.word	0x200010dc

080049f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80049f4:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <SystemInit+0x5c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <SystemInit+0x5c>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <SystemInit+0x5c>)
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	4911      	ldr	r1, [pc, #68]	; (8004a4c <SystemInit+0x5c>)
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <SystemInit+0x60>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <SystemInit+0x5c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <SystemInit+0x5c>)
 8004a12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <SystemInit+0x5c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <SystemInit+0x5c>)
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <SystemInit+0x5c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <SystemInit+0x5c>)
 8004a2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004a32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <SystemInit+0x5c>)
 8004a36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004a3a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <SystemInit+0x64>)
 8004a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a42:	609a      	str	r2, [r3, #8]
#endif 
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	f8ff0000 	.word	0xf8ff0000
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return 0;
 8004a62:	2300      	movs	r3, #0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END INIT */
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	4603      	mov	r3, r0
 8004a76:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return 0;
 8004a78:	2300      	movs	r3, #0
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END STATUS */
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4603      	mov	r3, r0
 8004a92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	for(;count>0;count--)
 8004a94:	e011      	b.n	8004aba <USER_read+0x36>
	{
		W25QXX_Read(buff, sector*512, 512);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	025b      	lsls	r3, r3, #9
 8004a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	68b8      	ldr	r0, [r7, #8]
 8004aa2:	f000 f845 	bl	8004b30 <W25QXX_Read>
		sector++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	607b      	str	r3, [r7, #4]
		buff+=512;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004ab2:	60bb      	str	r3, [r7, #8]
	for(;count>0;count--)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ea      	bne.n	8004a96 <USER_read+0x12>
	}
    return RES_OK;
 8004ac0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004ada:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	4603      	mov	r3, r0
 8004aee:	603a      	str	r2, [r7, #0]
 8004af0:	71fb      	strb	r3, [r7, #7]
 8004af2:	460b      	mov	r3, r1
 8004af4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return 0;
 8004af6:	2300      	movs	r3, #0
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
	...

08004b04 <SPI1_ReadWriteByte>:
//////////////////////////////////////////////////////////////////////////////////

u16 W25QXX_TYPE = W25Q64; //默认是W25Q128
extern SPI_HandleTypeDef hspi1;
u8 SPI1_ReadWriteByte(u8 TxData)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	71fb      	strb	r3, [r7, #7]
	u8 Rxdata;
	HAL_SPI_TransmitReceive(&hspi1, &TxData, &Rxdata, 1, 1000);
 8004b0e:	f107 020f 	add.w	r2, r7, #15
 8004b12:	1df9      	adds	r1, r7, #7
 8004b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4803      	ldr	r0, [pc, #12]	; (8004b2c <SPI1_ReadWriteByte+0x28>)
 8004b1e:	f7fc faca 	bl	80010b6 <HAL_SPI_TransmitReceive>
	return Rxdata; //返回收到的数据
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20001348 	.word	0x20001348

08004b30 <W25QXX_Read>:
//在指定地址开始读取指定长度的数据
//pBuffer:数据存储区
//ReadAddr:开始读取的地址(24bit)
//NumByteToRead:要读取的字节数(最大65535)
void W25QXX_Read(u8 *pBuffer, u32 ReadAddr, u16 NumByteToRead)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80fb      	strh	r3, [r7, #6]
	u16 i;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //使能器件
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2104      	movs	r1, #4
 8004b42:	481f      	ldr	r0, [pc, #124]	; (8004bc0 <W25QXX_Read+0x90>)
 8004b44:	f7fb fe48 	bl	80007d8 <HAL_GPIO_WritePin>

	SPI1_ReadWriteByte(W25X_ReadData); //发送读取命令
 8004b48:	2003      	movs	r0, #3
 8004b4a:	f7ff ffdb 	bl	8004b04 <SPI1_ReadWriteByte>
	if (W25QXX_TYPE == W25Q256)		   //如果是W25Q256的话地址为4字节的，要发送最高8位
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <W25QXX_Read+0x94>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	f64e 7218 	movw	r2, #61208	; 0xef18
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d105      	bne.n	8004b66 <W25QXX_Read+0x36>
	{
		SPI1_ReadWriteByte((u8)((ReadAddr) >> 24));
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	0e1b      	lsrs	r3, r3, #24
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ffcf 	bl	8004b04 <SPI1_ReadWriteByte>
	}
	SPI1_ReadWriteByte((u8)((ReadAddr) >> 16)); //发送24bit地址
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ffc9 	bl	8004b04 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte((u8)((ReadAddr) >> 8));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ffc3 	bl	8004b04 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte((u8)ReadAddr);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ffbe 	bl	8004b04 <SPI1_ReadWriteByte>
	for (i = 0; i < NumByteToRead; i++)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	82fb      	strh	r3, [r7, #22]
 8004b8c:	e00a      	b.n	8004ba4 <W25QXX_Read+0x74>
	{
		pBuffer[i] = SPI1_ReadWriteByte(0XFF); //循环读数
 8004b8e:	8afb      	ldrh	r3, [r7, #22]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	18d4      	adds	r4, r2, r3
 8004b94:	20ff      	movs	r0, #255	; 0xff
 8004b96:	f7ff ffb5 	bl	8004b04 <SPI1_ReadWriteByte>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < NumByteToRead; i++)
 8004b9e:	8afb      	ldrh	r3, [r7, #22]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	82fb      	strh	r3, [r7, #22]
 8004ba4:	8afa      	ldrh	r2, [r7, #22]
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d3f0      	bcc.n	8004b8e <W25QXX_Read+0x5e>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8004bac:	2201      	movs	r2, #1
 8004bae:	2104      	movs	r1, #4
 8004bb0:	4803      	ldr	r0, [pc, #12]	; (8004bc0 <W25QXX_Read+0x90>)
 8004bb2:	f7fb fe11 	bl	80007d8 <HAL_GPIO_WritePin>
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd90      	pop	{r4, r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40010800 	.word	0x40010800
 8004bc4:	20000020 	.word	0x20000020

08004bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004bc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004bca:	e003      	b.n	8004bd4 <LoopCopyDataInit>

08004bcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004bce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004bd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004bd2:	3104      	adds	r1, #4

08004bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004bd4:	480a      	ldr	r0, [pc, #40]	; (8004c00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004bd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004bda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004bdc:	d3f6      	bcc.n	8004bcc <CopyDataInit>
  ldr r2, =_sbss
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004be0:	e002      	b.n	8004be8 <LoopFillZerobss>

08004be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004be2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004be4:	f842 3b04 	str.w	r3, [r2], #4

08004be8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004bea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004bec:	d3f9      	bcc.n	8004be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004bee:	f7ff feff 	bl	80049f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bf2:	f000 f80f 	bl	8004c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bf6:	f7ff fc3b 	bl	8004470 <main>
  bx lr
 8004bfa:	4770      	bx	lr
  ldr r3, =_sidata
 8004bfc:	08004d88 	.word	0x08004d88
  ldr r0, =_sdata
 8004c00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004c04:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8004c08:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8004c0c:	200015d0 	.word	0x200015d0

08004c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c10:	e7fe      	b.n	8004c10 <ADC1_2_IRQHandler>
	...

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	2500      	movs	r5, #0
 8004c18:	4e0c      	ldr	r6, [pc, #48]	; (8004c4c <__libc_init_array+0x38>)
 8004c1a:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <__libc_init_array+0x3c>)
 8004c1c:	1ba4      	subs	r4, r4, r6
 8004c1e:	10a4      	asrs	r4, r4, #2
 8004c20:	42a5      	cmp	r5, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	f000 f822 	bl	8004c6c <_init>
 8004c28:	2500      	movs	r5, #0
 8004c2a:	4e0a      	ldr	r6, [pc, #40]	; (8004c54 <__libc_init_array+0x40>)
 8004c2c:	4c0a      	ldr	r4, [pc, #40]	; (8004c58 <__libc_init_array+0x44>)
 8004c2e:	1ba4      	subs	r4, r4, r6
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	42a5      	cmp	r5, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c3c:	4798      	blx	r3
 8004c3e:	3501      	adds	r5, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c46:	4798      	blx	r3
 8004c48:	3501      	adds	r5, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	08004d80 	.word	0x08004d80
 8004c50:	08004d80 	.word	0x08004d80
 8004c54:	08004d80 	.word	0x08004d80
 8004c58:	08004d84 	.word	0x08004d84

08004c5c <memset>:
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4402      	add	r2, r0
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d100      	bne.n	8004c66 <memset+0xa>
 8004c64:	4770      	bx	lr
 8004c66:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6a:	e7f9      	b.n	8004c60 <memset+0x4>

08004c6c <_init>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr

08004c78 <_fini>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr
